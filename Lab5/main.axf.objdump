
//campus.mcgill.ca/EMF/ELE/aozhas/Desktop/G58_LAB5/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	b4 17 00 00 c0 17 00 00 cc 17 00 00 d8 17 00 00     ................
  30:	e4 17 00 00 8c 29 00 00 5c 16 00 00 f0 17 00 00     .....)..\.......

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_region_zero_size_ram+0x90>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_region_zero_size_ram+0x8c>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_region_zero_size_ram+0x94>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_region_zero_size_ram+0x5c>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_region_zero_size_ram+0x5c>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_region_zero_size_ram+0x44>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_region_zero_size_ram+0x7c>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_region_zero_size_ram+0x6c>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_region_zero_size_ram+0x1c>
      d4:	eb000a13 	bl	2928 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00002ac8 	.word	0x00002ac8

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00031d08 	.word	0x00031d08

00000124 <__cs3_heap_start_ptr>:
     124:	00031d58 	.word	0x00031d58

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00031d10 	.word	0x00031d10
     170:	00031d13 	.word	0x00031d13
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	00031d10 	.word	0x00031d10
     1bc:	00031d10 	.word	0x00031d10
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00031d10 	.word	0x00031d10
     200:	00000000 	.word	0x00000000
     204:	00002a18 	.word	0x00002a18

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00002a18 	.word	0x00002a18
     250:	00031d14 	.word	0x00031d14
     254:	00002ac8 	.word	0x00002ac8
     258:	00000000 	.word	0x00000000

0000025c <generateSample>:
	int color = 0;

	// Volume
	double volume = 1.0;

	double generateSample(double frequency, int time){
     25c:	e92d4830 	push	{r4, r5, r11, lr}
     260:	e28db00c 	add	r11, sp, #12
     264:	e24dd028 	sub	sp, sp, #40	; 0x28
     268:	e14b02fc 	strd	r0, [r11, #-44]	; 0xffffffd4
     26c:	e50b2030 	str	r2, [r11, #-48]	; 0xffffffd0
	double signal;	//initialize return value		
	int index  = ((int)frequency*time) % 48000;	// Compute Index
     270:	e14b02dc 	ldrd	r0, [r11, #-44]	; 0xffffffd4
     274:	eb0007f9 	bl	2260 <__aeabi_d2iz>
     278:	e1a03000 	mov	r3, r0
     27c:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     280:	e0030392 	mul	r3, r2, r3
     284:	e30129f1 	movw	r2, #6641	; 0x19f1
     288:	e3402576 	movt	r2, #1398	; 0x576
     28c:	e0c21392 	smull	r1, r2, r2, r3
     290:	e1a01542 	asr	r1, r2, #10
     294:	e1a02fc3 	asr	r2, r3, #31
     298:	e0622001 	rsb	r2, r2, r1
     29c:	e30b1b80 	movw	r1, #48000	; 0xbb80
     2a0:	e0020291 	mul	r2, r1, r2
     2a4:	e0623003 	rsb	r3, r2, r3
     2a8:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	double decimal = frequency - (int) frequency;	// Extract decimal places for interpolation
     2ac:	e14b02dc 	ldrd	r0, [r11, #-44]	; 0xffffffd4
     2b0:	eb0007ea 	bl	2260 <__aeabi_d2iz>
     2b4:	e1a03000 	mov	r3, r0
     2b8:	e1a00003 	mov	r0, r3
     2bc:	eb000638 	bl	1ba4 <__aeabi_i2d>
     2c0:	e1a02000 	mov	r2, r0
     2c4:	e1a03001 	mov	r3, r1
     2c8:	e14b02dc 	ldrd	r0, [r11, #-44]	; 0xffffffd4
     2cc:	eb000566 	bl	186c <__aeabi_dsub>
     2d0:	e1a02000 	mov	r2, r0
     2d4:	e1a03001 	mov	r3, r1
     2d8:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc
	if (decimal == 0) signal = sine[index];		// Case: No Interpolation needed
     2dc:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
     2e0:	e3a02000 	mov	r2, #0
     2e4:	e3a03000 	mov	r3, #0
     2e8:	eb0007be 	bl	21e8 <__aeabi_dcmpeq>
     2ec:	e1a03000 	mov	r3, r0
     2f0:	e3530000 	cmp	r3, #0
     2f4:	0a000009 	beq	320 <generateSample+0xc4>
     2f8:	e3023ad8 	movw	r3, #10968	; 0x2ad8
     2fc:	e3403000 	movt	r3, #0
     300:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     304:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     308:	e1a00003 	mov	r0, r3
     30c:	eb000624 	bl	1ba4 <__aeabi_i2d>
     310:	e1a02000 	mov	r2, r0
     314:	e1a03001 	mov	r3, r1
     318:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec
     31c:	ea00002c 	b	3d4 <generateSample+0x178>
	else signal = ((1-decimal)*sine[index] + decimal*sine[index+1]);	// Interpolate
     320:	e3a00000 	mov	r0, #0
     324:	e3a01000 	mov	r1, #0
     328:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     32c:	e14b22d4 	ldrd	r2, [r11, #-36]	; 0xffffffdc
     330:	eb00054d 	bl	186c <__aeabi_dsub>
     334:	e1a02000 	mov	r2, r0
     338:	e1a03001 	mov	r3, r1
     33c:	e1a04002 	mov	r4, r2
     340:	e1a05003 	mov	r5, r3
     344:	e3023ad8 	movw	r3, #10968	; 0x2ad8
     348:	e3403000 	movt	r3, #0
     34c:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     350:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     354:	e1a00003 	mov	r0, r3
     358:	eb000611 	bl	1ba4 <__aeabi_i2d>
     35c:	e1a02000 	mov	r2, r0
     360:	e1a03001 	mov	r3, r1
     364:	e1a00004 	mov	r0, r4
     368:	e1a01005 	mov	r1, r5
     36c:	eb000643 	bl	1c80 <__aeabi_dmul>
     370:	e1a02000 	mov	r2, r0
     374:	e1a03001 	mov	r3, r1
     378:	e1a04002 	mov	r4, r2
     37c:	e1a05003 	mov	r5, r3
     380:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     384:	e2832001 	add	r2, r3, #1
     388:	e3023ad8 	movw	r3, #10968	; 0x2ad8
     38c:	e3403000 	movt	r3, #0
     390:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     394:	e1a00003 	mov	r0, r3
     398:	eb000601 	bl	1ba4 <__aeabi_i2d>
     39c:	e1a02000 	mov	r2, r0
     3a0:	e1a03001 	mov	r3, r1
     3a4:	e1a00002 	mov	r0, r2
     3a8:	e1a01003 	mov	r1, r3
     3ac:	e14b22d4 	ldrd	r2, [r11, #-36]	; 0xffffffdc
     3b0:	eb000632 	bl	1c80 <__aeabi_dmul>
     3b4:	e1a02000 	mov	r2, r0
     3b8:	e1a03001 	mov	r3, r1
     3bc:	e1a00004 	mov	r0, r4
     3c0:	e1a01005 	mov	r1, r5
     3c4:	eb000529 	bl	1870 <__adddf3>
     3c8:	e1a02000 	mov	r2, r0
     3cc:	e1a03001 	mov	r3, r1
     3d0:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec
	return signal;
     3d4:	e14b21d4 	ldrd	r2, [r11, #-20]	; 0xffffffec
	}
     3d8:	e1a00002 	mov	r0, r2
     3dc:	e1a01003 	mov	r1, r3
     3e0:	e24bd00c 	sub	sp, r11, #12
     3e4:	e8bd8830 	pop	{r4, r5, r11, pc}

000003e8 <main>:

	int main() {
     3e8:	e92d4800 	push	{r11, lr}
     3ec:	e28db004 	add	r11, sp, #4
     3f0:	e24dd969 	sub	sp, sp, #1720320	; 0x1a4000
     3f4:	e24ddda2 	sub	sp, sp, #10368	; 0x2880
     3f8:	e24dd018 	sub	sp, sp, #24
	// Clear interfaces
	VGA_clear_pixelbuff_ASM();
     3fc:	eb0003d7 	bl	1360 <VGA_clear_pixelbuff_ASM>
	VGA_clear_charbuff_ASM();
     400:	eb0003c6 	bl	1320 <VGA_clear_charbuff_ASM>
	audio_write_data_ASM(0x00, 0x00);
     404:	e3a00000 	mov	r0, #0
     408:	e3a01000 	mov	r1, #0
     40c:	eb0002d5 	bl	f68 <audio_write_data_ASM>
		
	short colours[] = {0x0000ff, 0x00ff00, 0x000f0};	// Loop between colours
     410:	e3023a20 	movw	r3, #10784	; 0x2a20
     414:	e3403000 	movt	r3, #0
     418:	e24b2030 	sub	r2, r11, #48	; 0x30
     41c:	e5930000 	ldr	r0, [r3]
     420:	e5820000 	str	r0, [r2]
     424:	e1d330b4 	ldrh	r3, [r3, #4]
     428:	e1c230b4 	strh	r3, [r2, #4]
	double past[320] = { 0 };
     42c:	e24b2ea3 	sub	r2, r11, #2608	; 0xa30
     430:	e2422004 	sub	r2, r2, #4
     434:	e3a03c0a 	mov	r3, #2560	; 0xa00
     438:	e1a00002 	mov	r0, r2
     43c:	e3a01000 	mov	r1, #0
     440:	e1a02003 	mov	r2, r3
     444:	eb000834 	bl	251c <memset>
	
	// Hold keyPress;
	char keyPress;

	// Notes: C, D, E, F, G, A, B, C
	double frequency[] = {130.813, 146.832, 164.814, 174.614, 195.998, 220.000, 246.942, 261.626, 0.0}; // Required frequencies
     448:	e3023a28 	movw	r3, #10792	; 0x2a28
     44c:	e3403000 	movt	r3, #0
     450:	e24b1d2a 	sub	r1, r11, #2688	; 0xa80
     454:	e2411004 	sub	r1, r1, #4
     458:	e1a02003 	mov	r2, r3
     45c:	e3a03048 	mov	r3, #72	; 0x48
     460:	e1a00001 	mov	r0, r1
     464:	e1a01002 	mov	r1, r2
     468:	e1a02003 	mov	r2, r3
     46c:	eb0007a7 	bl	2310 <memcpy>
		
	// Construct table of note waves samples
	int notes[9][48000];
	int i,j;
	for(i=0;i<9;i++){
     470:	e3a03000 	mov	r3, #0
     474:	e50b3008 	str	r3, [r11, #-8]
     478:	ea00002a 	b	528 <main+0x140>
		for(j=0;j<48000;j++){
     47c:	e3a03000 	mov	r3, #0
     480:	e50b300c 	str	r3, [r11, #-12]
     484:	ea000020 	b	50c <main+0x124>
			notes[i][j] = (int)generateSample(frequency[i], j);
     488:	e51b2008 	ldr	r2, [r11, #-8]
     48c:	e30f3580 	movw	r3, #62848	; 0xf580
     490:	e34f3fff 	movt	r3, #65535	; 0xffff
     494:	e1a02182 	lsl	r2, r2, #3
     498:	e24b0004 	sub	r0, r11, #4
     49c:	e0802002 	add	r2, r0, r2
     4a0:	e0823003 	add	r3, r2, r3
     4a4:	e1c320d0 	ldrd	r2, [r3]
     4a8:	e1a00002 	mov	r0, r2
     4ac:	e1a01003 	mov	r1, r3
     4b0:	e51b200c 	ldr	r2, [r11, #-12]
     4b4:	ebffff68 	bl	25c <generateSample>
     4b8:	e1a02000 	mov	r2, r0
     4bc:	e1a03001 	mov	r3, r1
     4c0:	e1a00002 	mov	r0, r2
     4c4:	e1a01003 	mov	r1, r3
     4c8:	eb000764 	bl	2260 <__aeabi_d2iz>
     4cc:	e1a02000 	mov	r2, r0
     4d0:	e3093780 	movw	r3, #38784	; 0x9780
     4d4:	e34f3fe5 	movt	r3, #65509	; 0xffe5
     4d8:	e51b1008 	ldr	r1, [r11, #-8]
     4dc:	e30b0b80 	movw	r0, #48000	; 0xbb80
     4e0:	e0000190 	mul	r0, r0, r1
     4e4:	e51b100c 	ldr	r1, [r11, #-12]
     4e8:	e0801001 	add	r1, r0, r1
     4ec:	e1a01101 	lsl	r1, r1, #2
     4f0:	e24b0004 	sub	r0, r11, #4
     4f4:	e0801001 	add	r1, r0, r1
     4f8:	e0813003 	add	r3, r1, r3
     4fc:	e5832000 	str	r2, [r3]
		
	// Construct table of note waves samples
	int notes[9][48000];
	int i,j;
	for(i=0;i<9;i++){
		for(j=0;j<48000;j++){
     500:	e51b300c 	ldr	r3, [r11, #-12]
     504:	e2833001 	add	r3, r3, #1
     508:	e50b300c 	str	r3, [r11, #-12]
     50c:	e51b200c 	ldr	r2, [r11, #-12]
     510:	e30b3b7f 	movw	r3, #47999	; 0xbb7f
     514:	e1520003 	cmp	r2, r3
     518:	daffffda 	ble	488 <main+0xa0>
	double frequency[] = {130.813, 146.832, 164.814, 174.614, 195.998, 220.000, 246.942, 261.626, 0.0}; // Required frequencies
		
	// Construct table of note waves samples
	int notes[9][48000];
	int i,j;
	for(i=0;i<9;i++){
     51c:	e51b3008 	ldr	r3, [r11, #-8]
     520:	e2833001 	add	r3, r3, #1
     524:	e50b3008 	str	r3, [r11, #-8]
     528:	e51b3008 	ldr	r3, [r11, #-8]
     52c:	e3530008 	cmp	r3, #8
     530:	daffffd1 	ble	47c <main+0x94>
		for(j=0;j<48000;j++){
			notes[i][j] = (int)generateSample(frequency[i], j);
		}
	}
	
	int_setup(1, (int[]){199});
     534:	e3a030c7 	mov	r3, #199	; 0xc7
     538:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
     53c:	e24b3028 	sub	r3, r11, #40	; 0x28
     540:	e3a00001 	mov	r0, #1
     544:	e1a01003 	mov	r1, r3
     548:	eb0004b7 	bl	182c <int_setup>

	// Timer for sound synth output
	HPS_TIM_config_t hps_tim;
	hps_tim.tim = TIM0; // First Timer
     54c:	e3093768 	movw	r3, #38760	; 0x9768
     550:	e34f3fe5 	movt	r3, #65509	; 0xffe5
     554:	e3a02001 	mov	r2, #1
     558:	e24b1004 	sub	r1, r11, #4
     55c:	e7c12003 	strb	r2, [r1, r3]
	// Timeout = 1/48000
	hps_tim.timeout = 20;
     560:	e3093768 	movw	r3, #38760	; 0x9768
     564:	e34f3fe5 	movt	r3, #65509	; 0xffe5
     568:	e3a02004 	mov	r2, #4
     56c:	e24b0004 	sub	r0, r11, #4
     570:	e0803003 	add	r3, r0, r3
     574:	e0833002 	add	r3, r3, r2
     578:	e3a02014 	mov	r2, #20
     57c:	e5832000 	str	r2, [r3]
	hps_tim.LD_en = 1;	
     580:	e3093768 	movw	r3, #38760	; 0x9768
     584:	e34f3fe5 	movt	r3, #65509	; 0xffe5
     588:	e3a02008 	mov	r2, #8
     58c:	e24b1004 	sub	r1, r11, #4
     590:	e0813003 	add	r3, r1, r3
     594:	e0833002 	add	r3, r3, r2
     598:	e3a02001 	mov	r2, #1
     59c:	e5832000 	str	r2, [r3]
	hps_tim.INT_en = 1;
     5a0:	e3093768 	movw	r3, #38760	; 0x9768
     5a4:	e34f3fe5 	movt	r3, #65509	; 0xffe5
     5a8:	e3a0200c 	mov	r2, #12
     5ac:	e24b0004 	sub	r0, r11, #4
     5b0:	e0803003 	add	r3, r0, r3
     5b4:	e0833002 	add	r3, r3, r2
     5b8:	e3a02001 	mov	r2, #1
     5bc:	e5832000 	str	r2, [r3]
	hps_tim.enable = 1;
     5c0:	e3093768 	movw	r3, #38760	; 0x9768
     5c4:	e34f3fe5 	movt	r3, #65509	; 0xffe5
     5c8:	e3a02010 	mov	r2, #16
     5cc:	e24b1004 	sub	r1, r11, #4
     5d0:	e0813003 	add	r3, r1, r3
     5d4:	e0833002 	add	r3, r3, r2
     5d8:	e3a02001 	mov	r2, #1
     5dc:	e5832000 	str	r2, [r3]
	HPS_TIM_config_ASM(&hps_tim);  // Configure to above
     5e0:	e3093768 	movw	r3, #38760	; 0x9768
     5e4:	e34f3fe5 	movt	r3, #65509	; 0xffe5
     5e8:	e3093764 	movw	r3, #38756	; 0x9764
     5ec:	e34f3fe5 	movt	r3, #65509	; 0xffe5
     5f0:	e08b3003 	add	r3, r11, r3
     5f4:	e1a00003 	mov	r0, r3
     5f8:	eb0001b5 	bl	cd4 <HPS_TIM_config_ASM>

	int icolour=0;
     5fc:	e3a03000 	mov	r3, #0
     600:	e50b3010 	str	r3, [r11, #-16]

	while(1) {
		// reset values
		long sample = 0; // reset the sample
     604:	e3a03000 	mov	r3, #0
     608:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec

		// Store keypress into array
		if(read_ps2_data_ASM(&keyPress)){
     60c:	e24b3ea3 	sub	r3, r11, #2608	; 0xa30
     610:	e2433004 	sub	r3, r3, #4
     614:	e2433001 	sub	r3, r3, #1
     618:	e1a00003 	mov	r0, r3
     61c:	eb0002c2 	bl	112c <read_ps2_data_ASM>
     620:	e1a03000 	mov	r3, r0
     624:	e3530000 	cmp	r3, #0
     628:	0a0000d2 	beq	978 <ICDIPTR+0x178>
			if (keyPress != 0xF0){
     62c:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     630:	e35300f0 	cmp	r3, #240	; 0xf0
     634:	0a000082 	beq	844 <ICDIPTR+0x44>
				if (keyPress == 0X1C){	// A = C Note
     638:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     63c:	e353001c 	cmp	r3, #28
     640:	1a000004 	bne	658 <main+0x270>
					keyPresses[0] = 1;
     644:	e3013d2c 	movw	r3, #7468	; 0x1d2c
     648:	e3403003 	movt	r3, #3
     64c:	e3a02001 	mov	r2, #1
     650:	e5832000 	str	r2, [r3]
				}
				else if ((keyPress == 0x55) && (volume < 3.0)){ // + (Increase Volume)
					volume += 0.2; 
				} 
				else if ((keyPress == 0x4E) && (volume >= 0.2)){ // - (Decrease Volume)
					volume -= 0.2; 
     654:	ea0000c6 	b	974 <ICDIPTR+0x174>
		if(read_ps2_data_ASM(&keyPress)){
			if (keyPress != 0xF0){
				if (keyPress == 0X1C){	// A = C Note
					keyPresses[0] = 1;
				}
				else if (keyPress == 0X1B){	// S = D Note
     658:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     65c:	e353001b 	cmp	r3, #27
     660:	1a000004 	bne	678 <main+0x290>
					keyPresses[1] = 1;
     664:	e3013d2c 	movw	r3, #7468	; 0x1d2c
     668:	e3403003 	movt	r3, #3
     66c:	e3a02001 	mov	r2, #1
     670:	e5832004 	str	r2, [r3, #4]
				}
				else if ((keyPress == 0x55) && (volume < 3.0)){ // + (Increase Volume)
					volume += 0.2; 
				} 
				else if ((keyPress == 0x4E) && (volume >= 0.2)){ // - (Decrease Volume)
					volume -= 0.2; 
     674:	ea0000be 	b	974 <ICDIPTR+0x174>
					keyPresses[0] = 1;
				}
				else if (keyPress == 0X1B){	// S = D Note
					keyPresses[1] = 1;
				}
				else if (keyPress == 0X23){	// D = E Note
     678:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     67c:	e3530023 	cmp	r3, #35	; 0x23
     680:	1a000004 	bne	698 <main+0x2b0>
					keyPresses[2] = 1;
     684:	e3013d2c 	movw	r3, #7468	; 0x1d2c
     688:	e3403003 	movt	r3, #3
     68c:	e3a02001 	mov	r2, #1
     690:	e5832008 	str	r2, [r3, #8]
				}
				else if ((keyPress == 0x55) && (volume < 3.0)){ // + (Increase Volume)
					volume += 0.2; 
				} 
				else if ((keyPress == 0x4E) && (volume >= 0.2)){ // - (Decrease Volume)
					volume -= 0.2; 
     694:	ea0000b6 	b	974 <ICDIPTR+0x174>
					keyPresses[1] = 1;
				}
				else if (keyPress == 0X23){	// D = E Note
					keyPresses[2] = 1;
				}
				else if (keyPress == 0X2B){	// F = F Note
     698:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     69c:	e353002b 	cmp	r3, #43	; 0x2b
     6a0:	1a000004 	bne	6b8 <main+0x2d0>
					keyPresses[3] = 1;
     6a4:	e3013d2c 	movw	r3, #7468	; 0x1d2c
     6a8:	e3403003 	movt	r3, #3
     6ac:	e3a02001 	mov	r2, #1
     6b0:	e583200c 	str	r2, [r3, #12]
				}
				else if ((keyPress == 0x55) && (volume < 3.0)){ // + (Increase Volume)
					volume += 0.2; 
				} 
				else if ((keyPress == 0x4E) && (volume >= 0.2)){ // - (Decrease Volume)
					volume -= 0.2; 
     6b4:	ea0000ae 	b	974 <ICDIPTR+0x174>
					keyPresses[2] = 1;
				}
				else if (keyPress == 0X2B){	// F = F Note
					keyPresses[3] = 1;
				}
				else if (keyPress == 0X3B){	// J = G Note
     6b8:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     6bc:	e353003b 	cmp	r3, #59	; 0x3b
     6c0:	1a000004 	bne	6d8 <main+0x2f0>
					keyPresses[4] = 1;
     6c4:	e3013d2c 	movw	r3, #7468	; 0x1d2c
     6c8:	e3403003 	movt	r3, #3
     6cc:	e3a02001 	mov	r2, #1
     6d0:	e5832010 	str	r2, [r3, #16]
				}
				else if ((keyPress == 0x55) && (volume < 3.0)){ // + (Increase Volume)
					volume += 0.2; 
				} 
				else if ((keyPress == 0x4E) && (volume >= 0.2)){ // - (Decrease Volume)
					volume -= 0.2; 
     6d4:	ea0000a6 	b	974 <ICDIPTR+0x174>
					keyPresses[3] = 1;
				}
				else if (keyPress == 0X3B){	// J = G Note
					keyPresses[4] = 1;
				}
				else if (keyPress == 0X42){	// K = A Note
     6d8:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     6dc:	e3530042 	cmp	r3, #66	; 0x42
     6e0:	1a000004 	bne	6f8 <main+0x310>
					keyPresses[5] = 1;
     6e4:	e3013d2c 	movw	r3, #7468	; 0x1d2c
     6e8:	e3403003 	movt	r3, #3
     6ec:	e3a02001 	mov	r2, #1
     6f0:	e5832014 	str	r2, [r3, #20]
				}
				else if ((keyPress == 0x55) && (volume < 3.0)){ // + (Increase Volume)
					volume += 0.2; 
				} 
				else if ((keyPress == 0x4E) && (volume >= 0.2)){ // - (Decrease Volume)
					volume -= 0.2; 
     6f4:	ea00009e 	b	974 <ICDIPTR+0x174>
					keyPresses[4] = 1;
				}
				else if (keyPress == 0X42){	// K = A Note
					keyPresses[5] = 1;
				}
				else if (keyPress == 0X4B){	// L = B Note
     6f8:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     6fc:	e353004b 	cmp	r3, #75	; 0x4b
     700:	1a000004 	bne	718 <main+0x330>
					keyPresses[6] = 1;
     704:	e3013d2c 	movw	r3, #7468	; 0x1d2c
     708:	e3403003 	movt	r3, #3
     70c:	e3a02001 	mov	r2, #1
     710:	e5832018 	str	r2, [r3, #24]
				}
				else if ((keyPress == 0x55) && (volume < 3.0)){ // + (Increase Volume)
					volume += 0.2; 
				} 
				else if ((keyPress == 0x4E) && (volume >= 0.2)){ // - (Decrease Volume)
					volume -= 0.2; 
     714:	ea000096 	b	974 <ICDIPTR+0x174>
					keyPresses[5] = 1;
				}
				else if (keyPress == 0X4B){	// L = B Note
					keyPresses[6] = 1;
				}
				else if (keyPress == 0X4C){	// ; = C Note
     718:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     71c:	e353004c 	cmp	r3, #76	; 0x4c
     720:	1a000004 	bne	738 <main+0x350>
					keyPresses[7] = 1;
     724:	e3013d2c 	movw	r3, #7468	; 0x1d2c
     728:	e3403003 	movt	r3, #3
     72c:	e3a02001 	mov	r2, #1
     730:	e583201c 	str	r2, [r3, #28]
				}
				else if ((keyPress == 0x55) && (volume < 3.0)){ // + (Increase Volume)
					volume += 0.2; 
				} 
				else if ((keyPress == 0x4E) && (volume >= 0.2)){ // - (Decrease Volume)
					volume -= 0.2; 
     734:	ea00008e 	b	974 <ICDIPTR+0x174>
					keyPresses[6] = 1;
				}
				else if (keyPress == 0X4C){	// ; = C Note
					keyPresses[7] = 1;
				}
				else if ((keyPress == 0x55) && (volume < 3.0)){ // + (Increase Volume)
     738:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     73c:	e3530055 	cmp	r3, #85	; 0x55
     740:	1a00001d 	bne	7bc <main+0x3d4>
     744:	e3023ad0 	movw	r3, #10960	; 0x2ad0
     748:	e3403000 	movt	r3, #0
     74c:	e1c320d0 	ldrd	r2, [r3]
     750:	e1a00002 	mov	r0, r2
     754:	e1a01003 	mov	r1, r3
     758:	e3a02000 	mov	r2, #0
     75c:	e3a03000 	mov	r3, #0
     760:	e3443008 	movt	r3, #16392	; 0x4008
     764:	eb0006a5 	bl	2200 <__aeabi_dcmplt>
     768:	e1a03000 	mov	r3, r0
     76c:	e3530000 	cmp	r3, #0
     770:	0a000011 	beq	7bc <main+0x3d4>
					volume += 0.2; 
     774:	e3023ad0 	movw	r3, #10960	; 0x2ad0
     778:	e3403000 	movt	r3, #0
     77c:	e1c320d0 	ldrd	r2, [r3]
     780:	e1a00002 	mov	r0, r2
     784:	e1a01003 	mov	r1, r3
     788:	e309299a 	movw	r2, #39322	; 0x999a
     78c:	e3492999 	movt	r2, #39321	; 0x9999
     790:	e3093999 	movw	r3, #39321	; 0x9999
     794:	e3433fc9 	movt	r3, #16329	; 0x3fc9
     798:	eb000434 	bl	1870 <__adddf3>
     79c:	e1a02000 	mov	r2, r0
     7a0:	e1a03001 	mov	r3, r1
     7a4:	e1a00002 	mov	r0, r2
     7a8:	e1a01003 	mov	r1, r3
     7ac:	e3023ad0 	movw	r3, #10960	; 0x2ad0
     7b0:	e3403000 	movt	r3, #0
     7b4:	e1c300f0 	strd	r0, [r3]
     7b8:	ea00006e 	b	978 <ICDIPTR+0x178>
				} 
				else if ((keyPress == 0x4E) && (volume >= 0.2)){ // - (Decrease Volume)
     7bc:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     7c0:	e353004e 	cmp	r3, #78	; 0x4e
     7c4:	1a00006a 	bne	974 <ICDIPTR+0x174>
     7c8:	e3023ad0 	movw	r3, #10960	; 0x2ad0
     7cc:	e3403000 	movt	r3, #0
     7d0:	e1c320d0 	ldrd	r2, [r3]
     7d4:	e1a00002 	mov	r0, r2
     7d8:	e1a01003 	mov	r1, r3
     7dc:	e309299a 	movw	r2, #39322	; 0x999a
     7e0:	e3492999 	movt	r2, #39321	; 0x9999
     7e4:	e3093999 	movw	r3, #39321	; 0x9999
     7e8:	e3433fc9 	movt	r3, #16329	; 0x3fc9
     7ec:	eb00068f 	bl	2230 <__aeabi_dcmpge>
     7f0:	e1a03000 	mov	r3, r0
     7f4:	e3530000 	cmp	r3, #0
     7f8:	0a00005e 	beq	978 <ICDIPTR+0x178>
					volume -= 0.2; 
     7fc:	e3023ad0 	movw	r3, #10960	; 0x2ad0
     800:	e3403000 	movt	r3, #0
     804:	e1c320d0 	ldrd	r2, [r3]
     808:	e1a00002 	mov	r0, r2
     80c:	e1a01003 	mov	r1, r3
     810:	e309299a 	movw	r2, #39322	; 0x999a
     814:	e3492999 	movt	r2, #39321	; 0x9999
     818:	e3093999 	movw	r3, #39321	; 0x9999
     81c:	e3433fc9 	movt	r3, #16329	; 0x3fc9
     820:	eb000411 	bl	186c <__aeabi_dsub>
     824:	e1a02000 	mov	r2, r0
     828:	e1a03001 	mov	r3, r1
     82c:	e1a00002 	mov	r0, r2
     830:	e1a01003 	mov	r1, r3
     834:	e3023ad0 	movw	r3, #10960	; 0x2ad0
     838:	e3403000 	movt	r3, #0
     83c:	e1c300f0 	strd	r0, [r3]
     840:	ea00004b 	b	974 <ICDIPTR+0x174>
				}
			}
			else if (keyPress == 0xF0){ // Break code found in the buffer
     844:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     848:	e35300f0 	cmp	r3, #240	; 0xf0
     84c:	1a000049 	bne	978 <ICDIPTR+0x178>
				while(!read_ps2_data_ASM(&keyPress)); // Wait until next keypress is read to see which which button was up
     850:	e1a00000 	nop			; (mov r0, r0)
     854:	e24b3ea3 	sub	r3, r11, #2608	; 0xa30
     858:	e2433004 	sub	r3, r3, #4
     85c:	e2433001 	sub	r3, r3, #1
     860:	e1a00003 	mov	r0, r3
     864:	eb000230 	bl	112c <read_ps2_data_ASM>
     868:	e1a03000 	mov	r3, r0
     86c:	e3530000 	cmp	r3, #0
     870:	0afffff7 	beq	854 <ICDIPTR+0x54>

				// Set to off in array. 
				if (keyPress == 0X1C){	// A is up
     874:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     878:	e353001c 	cmp	r3, #28
     87c:	1a000004 	bne	894 <ICDIPTR+0x94>
					keyPresses[0] = 0;
     880:	e3013d2c 	movw	r3, #7468	; 0x1d2c
     884:	e3403003 	movt	r3, #3
     888:	e3a02000 	mov	r2, #0
     88c:	e5832000 	str	r2, [r3]
     890:	ea000038 	b	978 <ICDIPTR+0x178>
				}
				else if (keyPress == 0X1B){	// S is up
     894:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     898:	e353001b 	cmp	r3, #27
     89c:	1a000004 	bne	8b4 <ICDIPTR+0xb4>
					keyPresses[1] = 0;
     8a0:	e3013d2c 	movw	r3, #7468	; 0x1d2c
     8a4:	e3403003 	movt	r3, #3
     8a8:	e3a02000 	mov	r2, #0
     8ac:	e5832004 	str	r2, [r3, #4]
     8b0:	ea000030 	b	978 <ICDIPTR+0x178>
				}
				else if (keyPress == 0X23){	// D is up
     8b4:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     8b8:	e3530023 	cmp	r3, #35	; 0x23
     8bc:	1a000004 	bne	8d4 <ICDIPTR+0xd4>
					keyPresses[2] = 0;
     8c0:	e3013d2c 	movw	r3, #7468	; 0x1d2c
     8c4:	e3403003 	movt	r3, #3
     8c8:	e3a02000 	mov	r2, #0
     8cc:	e5832008 	str	r2, [r3, #8]
     8d0:	ea000028 	b	978 <ICDIPTR+0x178>
				}
				else if (keyPress == 0X2B){	// F is up
     8d4:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     8d8:	e353002b 	cmp	r3, #43	; 0x2b
     8dc:	1a000004 	bne	8f4 <ICDIPTR+0xf4>
					keyPresses[3] = 0;
     8e0:	e3013d2c 	movw	r3, #7468	; 0x1d2c
     8e4:	e3403003 	movt	r3, #3
     8e8:	e3a02000 	mov	r2, #0
     8ec:	e583200c 	str	r2, [r3, #12]
     8f0:	ea000020 	b	978 <ICDIPTR+0x178>
				}
				else if (keyPress == 0X3B){	// J is up 
     8f4:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     8f8:	e353003b 	cmp	r3, #59	; 0x3b
     8fc:	1a000004 	bne	914 <ICDIPTR+0x114>
					keyPresses[4] = 0;
     900:	e3013d2c 	movw	r3, #7468	; 0x1d2c
     904:	e3403003 	movt	r3, #3
     908:	e3a02000 	mov	r2, #0
     90c:	e5832010 	str	r2, [r3, #16]
     910:	ea000018 	b	978 <ICDIPTR+0x178>
				}
				else if (keyPress == 0X42){	// K is up 
     914:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     918:	e3530042 	cmp	r3, #66	; 0x42
     91c:	1a000004 	bne	934 <ICDIPTR+0x134>
					keyPresses[5] = 0;
     920:	e3013d2c 	movw	r3, #7468	; 0x1d2c
     924:	e3403003 	movt	r3, #3
     928:	e3a02000 	mov	r2, #0
     92c:	e5832014 	str	r2, [r3, #20]
     930:	ea000010 	b	978 <ICDIPTR+0x178>
				}
				else if (keyPress == 0X4B){	// L is up
     934:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     938:	e353004b 	cmp	r3, #75	; 0x4b
     93c:	1a000004 	bne	954 <ICDIPTR+0x154>
					keyPresses[6] = 0;
     940:	e3013d2c 	movw	r3, #7468	; 0x1d2c
     944:	e3403003 	movt	r3, #3
     948:	e3a02000 	mov	r2, #0
     94c:	e5832018 	str	r2, [r3, #24]
     950:	ea000008 	b	978 <ICDIPTR+0x178>
				}
				else if (keyPress == 0X4C){	// ; is up
     954:	e55b3a35 	ldrb	r3, [r11, #-2613]	; 0xfffff5cb
     958:	e353004c 	cmp	r3, #76	; 0x4c
     95c:	1a000005 	bne	978 <ICDIPTR+0x178>
					keyPresses[7] = 0;
     960:	e3013d2c 	movw	r3, #7468	; 0x1d2c
     964:	e3403003 	movt	r3, #3
     968:	e3a02000 	mov	r2, #0
     96c:	e583201c 	str	r2, [r3, #28]
     970:	ea000000 	b	978 <ICDIPTR+0x178>
				}
				else if ((keyPress == 0x55) && (volume < 3.0)){ // + (Increase Volume)
					volume += 0.2; 
				} 
				else if ((keyPress == 0x4E) && (volume >= 0.2)){ // - (Decrease Volume)
					volume -= 0.2; 
     974:	e1a00000 	nop			; (mov r0, r0)
			}
		}

		
		// Check for timer flag
		if (hps_tim0_int_flag){
     978:	e3003dfc 	movw	r3, #3580	; 0xdfc
     97c:	e3403000 	movt	r3, #0
     980:	e5933000 	ldr	r3, [r3]
     984:	e3530000 	cmp	r3, #0
     988:	0a0000a6 	beq	c28 <ICDIPTR+0x428>
			hps_tim0_int_flag = 0; // Flag down	
     98c:	e3003dfc 	movw	r3, #3580	; 0xdfc
     990:	e3403000 	movt	r3, #0
     994:	e3a02000 	mov	r2, #0
     998:	e5832000 	str	r2, [r3]

			// Get Frequency from wavetable
			int x;
			for (x = 0; x < 8; x ++){
     99c:	e3a03000 	mov	r3, #0
     9a0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
     9a4:	ea000019 	b	a10 <ICDIPTR+0x210>
				if (keyPresses[x] == 1){ 
     9a8:	e3013d2c 	movw	r3, #7468	; 0x1d2c
     9ac:	e3403003 	movt	r3, #3
     9b0:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     9b4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     9b8:	e3530001 	cmp	r3, #1
     9bc:	1a000010 	bne	a04 <ICDIPTR+0x204>
					sample += notes[x][t];
     9c0:	e3013d50 	movw	r3, #7504	; 0x1d50
     9c4:	e3403003 	movt	r3, #3
     9c8:	e5932000 	ldr	r2, [r3]
     9cc:	e3093780 	movw	r3, #38784	; 0x9780
     9d0:	e34f3fe5 	movt	r3, #65509	; 0xffe5
     9d4:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
     9d8:	e30b0b80 	movw	r0, #48000	; 0xbb80
     9dc:	e0010190 	mul	r1, r0, r1
     9e0:	e0812002 	add	r2, r1, r2
     9e4:	e1a02102 	lsl	r2, r2, #2
     9e8:	e24b0004 	sub	r0, r11, #4
     9ec:	e0802002 	add	r2, r0, r2
     9f0:	e0823003 	add	r3, r2, r3
     9f4:	e5933000 	ldr	r3, [r3]
     9f8:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     9fc:	e0823003 	add	r3, r2, r3
     a00:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
		if (hps_tim0_int_flag){
			hps_tim0_int_flag = 0; // Flag down	

			// Get Frequency from wavetable
			int x;
			for (x = 0; x < 8; x ++){
     a04:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     a08:	e2833001 	add	r3, r3, #1
     a0c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
     a10:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     a14:	e3530007 	cmp	r3, #7
     a18:	daffffe2 	ble	9a8 <ICDIPTR+0x1a8>
				if (keyPresses[x] == 1){ 
					sample += notes[x][t];
				}
			}
			sample *= volume;
     a1c:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     a20:	eb00045f 	bl	1ba4 <__aeabi_i2d>
     a24:	e3023ad0 	movw	r3, #10960	; 0x2ad0
     a28:	e3403000 	movt	r3, #0
     a2c:	e1c320d0 	ldrd	r2, [r3]
     a30:	eb000492 	bl	1c80 <__aeabi_dmul>
     a34:	e1a02000 	mov	r2, r0
     a38:	e1a03001 	mov	r3, r1
     a3c:	e1a00002 	mov	r0, r2
     a40:	e1a01003 	mov	r1, r3
     a44:	eb000605 	bl	2260 <__aeabi_d2iz>
     a48:	e1a03000 	mov	r3, r0
     a4c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			
			// Write to audio codec port.
			if(audio_write_data_ASM(sample, sample)){
     a50:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     a54:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     a58:	eb000142 	bl	f68 <audio_write_data_ASM>
     a5c:	e1a03000 	mov	r3, r0
     a60:	e3530000 	cmp	r3, #0
     a64:	0a000065 	beq	c00 <ICDIPTR+0x400>
				t++;
     a68:	e3013d50 	movw	r3, #7504	; 0x1d50
     a6c:	e3403003 	movt	r3, #3
     a70:	e5933000 	ldr	r3, [r3]
     a74:	e2832001 	add	r2, r3, #1
     a78:	e3013d50 	movw	r3, #7504	; 0x1d50
     a7c:	e3403003 	movt	r3, #3
     a80:	e5832000 	str	r2, [r3]
				int index = 0;
     a84:	e3a03000 	mov	r3, #0
     a88:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
				double val = 0;
     a8c:	e3a02000 	mov	r2, #0
     a90:	e3a03000 	mov	r3, #0
     a94:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc
			
				// Only draw every 10 polls.
				if((t%10 == 0)){  
     a98:	e3013d50 	movw	r3, #7504	; 0x1d50
     a9c:	e3403003 	movt	r3, #3
     aa0:	e5931000 	ldr	r1, [r3]
     aa4:	e3063667 	movw	r3, #26215	; 0x6667
     aa8:	e3463666 	movt	r3, #26214	; 0x6666
     aac:	e0c32193 	smull	r2, r3, r3, r1
     ab0:	e1a02143 	asr	r2, r3, #2
     ab4:	e1a03fc1 	asr	r3, r1, #31
     ab8:	e0632002 	rsb	r2, r3, r2
     abc:	e1a03002 	mov	r3, r2
     ac0:	e1a03103 	lsl	r3, r3, #2
     ac4:	e0833002 	add	r3, r3, r2
     ac8:	e1a03083 	lsl	r3, r3, #1
     acc:	e0632001 	rsb	r2, r3, r1
     ad0:	e3520000 	cmp	r2, #0
     ad4:	1a000049 	bne	c00 <ICDIPTR+0x400>

					index = (t/10)%320; // Grab index for drawing point (x-coordinate)
     ad8:	e3013d50 	movw	r3, #7504	; 0x1d50
     adc:	e3403003 	movt	r3, #3
     ae0:	e5932000 	ldr	r2, [r3]
     ae4:	e3063667 	movw	r3, #26215	; 0x6667
     ae8:	e3463666 	movt	r3, #26214	; 0x6666
     aec:	e0c30293 	smull	r0, r3, r3, r2
     af0:	e1a01143 	asr	r1, r3, #2
     af4:	e1a03fc2 	asr	r3, r2, #31
     af8:	e0632001 	rsb	r2, r3, r1
     afc:	e3063667 	movw	r3, #26215	; 0x6667
     b00:	e3463666 	movt	r3, #26214	; 0x6666
     b04:	e0c31293 	smull	r1, r3, r3, r2
     b08:	e1a013c3 	asr	r1, r3, #7
     b0c:	e1a03fc2 	asr	r3, r2, #31
     b10:	e0631001 	rsb	r1, r3, r1
     b14:	e1a03001 	mov	r3, r1
     b18:	e1a03103 	lsl	r3, r3, #2
     b1c:	e0833001 	add	r3, r3, r1
     b20:	e1a03303 	lsl	r3, r3, #6
     b24:	e0633002 	rsb	r3, r3, r2
     b28:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
                                                                                                    
					// Clear past point at index
					VGA_draw_point_ASM(index, past[index], 0);
     b2c:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     b30:	e30f35d0 	movw	r3, #62928	; 0xf5d0
     b34:	e34f3fff 	movt	r3, #65535	; 0xffff
     b38:	e1a02182 	lsl	r2, r2, #3
     b3c:	e24b0004 	sub	r0, r11, #4
     b40:	e0802002 	add	r2, r0, r2
     b44:	e0823003 	add	r3, r2, r3
     b48:	e1c320d0 	ldrd	r2, [r3]
     b4c:	e1a00002 	mov	r0, r2
     b50:	e1a01003 	mov	r1, r3
     b54:	eb0005c1 	bl	2260 <__aeabi_d2iz>
     b58:	e1a03000 	mov	r3, r0
     b5c:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
     b60:	e1a01003 	mov	r1, r3
     b64:	e3a02000 	mov	r2, #0
     b68:	eb000230 	bl	1430 <VGA_draw_point_ASM>
					
					// Compute y
					// 120 is the center of the screen
					// Scale down y by 600000 (hacky fix)
					val = 120 + sample/600000;
     b6c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     b70:	e3013d85 	movw	r3, #7557	; 0x1d85
     b74:	e3463fd9 	movt	r3, #28633	; 0x6fd9
     b78:	e0c31293 	smull	r1, r3, r3, r2
     b7c:	e1a01943 	asr	r1, r3, #18
     b80:	e1a03fc2 	asr	r3, r2, #31
     b84:	e0633001 	rsb	r3, r3, r1
     b88:	e2833078 	add	r3, r3, #120	; 0x78
     b8c:	e1a00003 	mov	r0, r3
     b90:	eb000403 	bl	1ba4 <__aeabi_i2d>
     b94:	e1a02000 	mov	r2, r0
     b98:	e1a03001 	mov	r3, r1
     b9c:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc

					//We keep track of past values 
					past[index] = val;
     ba0:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     ba4:	e30f35d0 	movw	r3, #62928	; 0xf5d0
     ba8:	e34f3fff 	movt	r3, #65535	; 0xffff
     bac:	e1a02182 	lsl	r2, r2, #3
     bb0:	e24b0004 	sub	r0, r11, #4
     bb4:	e0802002 	add	r2, r0, r2
     bb8:	e0821003 	add	r1, r2, r3
     bbc:	e14b22d4 	ldrd	r2, [r11, #-36]	; 0xffffffdc
     bc0:	e1c120f0 	strd	r2, [r1]

					//Draw point
					VGA_draw_point_ASM(index, val, colours[icolour]);		
     bc4:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
     bc8:	eb0005a4 	bl	2260 <__aeabi_d2iz>
     bcc:	e1a02000 	mov	r2, r0
     bd0:	e51b1010 	ldr	r1, [r11, #-16]
     bd4:	e3e0302b 	mvn	r3, #43	; 0x2b
     bd8:	e1a01081 	lsl	r1, r1, #1
     bdc:	e24b0004 	sub	r0, r11, #4
     be0:	e0801001 	add	r1, r0, r1
     be4:	e0813003 	add	r3, r1, r3
     be8:	e1d330b0 	ldrh	r3, [r3]
     bec:	e6bf3073 	sxth	r3, r3
     bf0:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
     bf4:	e1a01002 	mov	r1, r2
     bf8:	e1a02003 	mov	r2, r3
     bfc:	eb00020b 	bl	1430 <VGA_draw_point_ASM>
				}
			}
			
			// Modulo back on 48000
			if (t == 48000){
     c00:	e3013d50 	movw	r3, #7504	; 0x1d50
     c04:	e3403003 	movt	r3, #3
     c08:	e5932000 	ldr	r2, [r3]
     c0c:	e30b3b80 	movw	r3, #48000	; 0xbb80
     c10:	e1520003 	cmp	r2, r3
     c14:	1a000003 	bne	c28 <ICDIPTR+0x428>
				t = 0;
     c18:	e3013d50 	movw	r3, #7504	; 0x1d50
     c1c:	e3403003 	movt	r3, #3
     c20:	e3a02000 	mov	r2, #0
     c24:	e5832000 	str	r2, [r3]
			}
		}
		if(icolour==2){
     c28:	e51b3010 	ldr	r3, [r11, #-16]
     c2c:	e3530002 	cmp	r3, #2
     c30:	1a000001 	bne	c3c <ICDIPTR+0x43c>
			icolour=0;
     c34:	e3a03000 	mov	r3, #0
     c38:	e50b3010 	str	r3, [r11, #-16]
		}
		icolour++;
     c3c:	e51b3010 	ldr	r3, [r11, #-16]
     c40:	e2833001 	add	r3, r3, #1
     c44:	e50b3010 	str	r3, [r11, #-16]
	}
     c48:	eafffe6d 	b	604 <main+0x21c>

00000c4c <HEX_clear_ASM>:
     c4c:	e3a01000 	mov	r1, #0
     c50:	ea000004 	b	c68 <WRITE>

00000c54 <HEX_flood_ASM>:
     c54:	e3a0107f 	mov	r1, #127	; 0x7f
     c58:	ea000002 	b	c68 <WRITE>

00000c5c <HEX_write_ASM>:
     c5c:	e59f2064 	ldr	r2, [pc, #100]	; cc8 <PATTERNS+0x14>
     c60:	e7d21001 	ldrb	r1, [r2, r1]
     c64:	eaffffff 	b	c68 <WRITE>

00000c68 <WRITE>:
     c68:	e92d0030 	push	{r4, r5}
     c6c:	e59f2058 	ldr	r2, [pc, #88]	; ccc <PATTERNS+0x18>
     c70:	e3a03000 	mov	r3, #0
     c74:	e3e050ff 	mvn	r5, #255	; 0xff

00000c78 <LOOP>:
     c78:	e3100001 	tst	r0, #1
     c7c:	0a000003 	beq	c90 <CONTINUE>
     c80:	e5924000 	ldr	r4, [r2]
     c84:	e0044005 	and	r4, r4, r5
     c88:	e1844001 	orr	r4, r4, r1
     c8c:	e5824000 	str	r4, [r2]

00000c90 <CONTINUE>:
     c90:	e1a05c65 	ror	r5, r5, #24
     c94:	e1a01c61 	ror	r1, r1, #24
     c98:	e2833001 	add	r3, r3, #1
     c9c:	e3530004 	cmp	r3, #4
     ca0:	059f2028 	ldreq	r2, [pc, #40]	; cd0 <PATTERNS+0x1c>
     ca4:	e1b000a0 	lsrs	r0, r0, #1
     ca8:	1afffff2 	bne	c78 <LOOP>
     cac:	e8bd0030 	pop	{r4, r5}
     cb0:	e12fff1e 	bx	lr

00000cb4 <PATTERNS>:
     cb4:	4f5b063f 	.word	0x4f5b063f
     cb8:	077d6d66 	.word	0x077d6d66
     cbc:	7c776f7f 	.word	0x7c776f7f
     cc0:	71795e39 	.word	0x71795e39
     cc4:	000000ff 	.word	0x000000ff
     cc8:	00000cb4 	.word	0x00000cb4
     ccc:	ff200020 	.word	0xff200020
     cd0:	ff200030 	.word	0xff200030

00000cd4 <HPS_TIM_config_ASM>:
     cd4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     cd8:	e3a01000 	mov	r1, #0
     cdc:	e3a02001 	mov	r2, #1
     ce0:	e5907000 	ldr	r7, [r0]
     ce4:	eaffffff 	b	ce8 <LOOP>

00000ce8 <LOOP>:
     ce8:	e1170112 	tst	r7, r2, lsl r1
     cec:	0a000000 	beq	cf4 <CONTINUE>
     cf0:	eb000004 	bl	d08 <CONFIG>

00000cf4 <CONTINUE>:
     cf4:	e2811001 	add	r1, r1, #1
     cf8:	e3510004 	cmp	r1, #4
     cfc:	bafffff9 	blt	ce8 <LOOP>

00000d00 <DONE>:
     d00:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     d04:	e12fff1e 	bx	lr

00000d08 <CONFIG>:
     d08:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     d0c:	e59f30e4 	ldr	r3, [pc, #228]	; df8 <HPS_TIM_BASE+0x10>
     d10:	e7934101 	ldr	r4, [r3, r1, lsl #2]
     d14:	eb000005 	bl	d30 <DISABLE>
     d18:	eb000008 	bl	d40 <SET_LOAD_VAL>
     d1c:	eb00000e 	bl	d5c <SET_LOAD_BIT>
     d20:	eb000013 	bl	d74 <SET_INT_BIT>
     d24:	eb000019 	bl	d90 <SET_EN_BIT>
     d28:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     d2c:	e12fff1e 	bx	lr

00000d30 <DISABLE>:
     d30:	e5945008 	ldr	r5, [r4, #8]
     d34:	e3c55001 	bic	r5, r5, #1
     d38:	e5845008 	str	r5, [r4, #8]
     d3c:	e12fff1e 	bx	lr

00000d40 <SET_LOAD_VAL>:
     d40:	e5905004 	ldr	r5, [r0, #4]
     d44:	e3a06019 	mov	r6, #25
     d48:	e0050695 	mul	r5, r5, r6
     d4c:	e3510002 	cmp	r1, #2
     d50:	b1a05105 	lsllt	r5, r5, #2
     d54:	e5845000 	str	r5, [r4]
     d58:	e12fff1e 	bx	lr

00000d5c <SET_LOAD_BIT>:
     d5c:	e5945008 	ldr	r5, [r4, #8]
     d60:	e5906008 	ldr	r6, [r0, #8]
     d64:	e3c55002 	bic	r5, r5, #2
     d68:	e1855086 	orr	r5, r5, r6, lsl #1
     d6c:	e5845008 	str	r5, [r4, #8]
     d70:	e12fff1e 	bx	lr

00000d74 <SET_INT_BIT>:
     d74:	e5945008 	ldr	r5, [r4, #8]
     d78:	e590600c 	ldr	r6, [r0, #12]
     d7c:	e2266001 	eor	r6, r6, #1
     d80:	e3c55004 	bic	r5, r5, #4
     d84:	e1855106 	orr	r5, r5, r6, lsl #2
     d88:	e5845008 	str	r5, [r4, #8]
     d8c:	e12fff1e 	bx	lr

00000d90 <SET_EN_BIT>:
     d90:	e5945008 	ldr	r5, [r4, #8]
     d94:	e5906010 	ldr	r6, [r0, #16]
     d98:	e3c55001 	bic	r5, r5, #1
     d9c:	e1855006 	orr	r5, r5, r6
     da0:	e5845008 	str	r5, [r4, #8]
     da4:	e12fff1e 	bx	lr

00000da8 <HPS_TIM_clear_INT_ASM>:
     da8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     dac:	e3a01000 	mov	r1, #0
     db0:	e3a02001 	mov	r2, #1
     db4:	eaffffff 	b	db8 <INT_LOOP>

00000db8 <INT_LOOP>:
     db8:	e1100112 	tst	r0, r2, lsl r1
     dbc:	0a000000 	beq	dc4 <INT_CONTINUE>
     dc0:	eb000004 	bl	dd8 <CLEAR_IT>

00000dc4 <INT_CONTINUE>:
     dc4:	e2811001 	add	r1, r1, #1
     dc8:	e3510004 	cmp	r1, #4
     dcc:	bafffff9 	blt	db8 <INT_LOOP>

00000dd0 <INT_DONE>:
     dd0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     dd4:	e12fff1e 	bx	lr

00000dd8 <CLEAR_IT>:
     dd8:	e59f3018 	ldr	r3, [pc, #24]	; df8 <HPS_TIM_BASE+0x10>
     ddc:	e7933101 	ldr	r3, [r3, r1, lsl #2]
     de0:	e593300c 	ldr	r3, [r3, #12]
     de4:	e12fff1e 	bx	lr

00000de8 <HPS_TIM_BASE>:
     de8:	ffc08000 	.word	0xffc08000
     dec:	ffc09000 	.word	0xffc09000
     df0:	ffd00000 	.word	0xffd00000
     df4:	ffd01000 	.word	0xffd01000
     df8:	00000de8 	.word	0x00000de8

00000dfc <hps_tim0_int_flag>:
     dfc:	00000000 	.word	0x00000000

00000e00 <hps_tim1_int_flag>:
     e00:	00000000 	.word	0x00000000

00000e04 <A9_PRIV_TIM_ISR>:

hps_tim1_int_flag:
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
     e04:	e12fff1e 	bx	lr

00000e08 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     e08:	e12fff1e 	bx	lr

00000e0c <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     e0c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x1 //moves the one-hot encoded value of the timer interrupt to clear
     e10:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM //clears tim0's interrupt request bit
     e14:	ebffffe3 	bl	da8 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag //loads the address of tim0's interrupt flag into R0
     e18:	e59f0058 	ldr	r0, [pc, #88]	; e78 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1 //moves 1 into R1 to store at the address in R0
     e1c:	e3a01001 	mov	r1, #1
	STR R1, [R0] //sets hps_tim0_int_flag to 1
     e20:	e5801000 	str	r1, [r0]

	POP {LR}
     e24:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     e28:	e12fff1e 	bx	lr

00000e2c <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	PUSH {LR}
     e2c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x2 //moves the one-hot encoded value of the timer interrupt to clear
     e30:	e3a00002 	mov	r0, #2
	BL HPS_TIM_clear_INT_ASM //clears tim1's interrupt request bit
     e34:	ebffffdb 	bl	da8 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim1_int_flag //loads the address of tim1's interrupt flag into R1
     e38:	e59f003c 	ldr	r0, [pc, #60]	; e7c <FPGA_PS2_DUAL_ISR+0x8>
	MOV R1, #1 //moves 1 into R1 to store at the address in R0
     e3c:	e3a01001 	mov	r1, #1
	STR R1, [R0] //	sets hps_tim1_int_flag to 1
     e40:	e5801000 	str	r1, [r0]

	POP {LR}
     e44:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     e48:	e12fff1e 	bx	lr

00000e4c <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     e4c:	e12fff1e 	bx	lr

00000e50 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     e50:	e12fff1e 	bx	lr

00000e54 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     e54:	e12fff1e 	bx	lr

00000e58 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
     e58:	e12fff1e 	bx	lr

00000e5c <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     e5c:	e12fff1e 	bx	lr

00000e60 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     e60:	e12fff1e 	bx	lr

00000e64 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     e64:	e12fff1e 	bx	lr

00000e68 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     e68:	e12fff1e 	bx	lr

00000e6c <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     e6c:	e12fff1e 	bx	lr

00000e70 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     e70:	e12fff1e 	bx	lr

00000e74 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     e74:	e12fff1e 	bx	lr
	PUSH {LR}
	
	MOV R0, #0x1 //moves the one-hot encoded value of the timer interrupt to clear
	BL HPS_TIM_clear_INT_ASM //clears tim0's interrupt request bit

	LDR R0, =hps_tim0_int_flag //loads the address of tim0's interrupt flag into R0
     e78:	00000dfc 	.word	0x00000dfc
	PUSH {LR}
	
	MOV R0, #0x2 //moves the one-hot encoded value of the timer interrupt to clear
	BL HPS_TIM_clear_INT_ASM //clears tim1's interrupt request bit

	LDR R0, =hps_tim1_int_flag //loads the address of tim1's interrupt flag into R1
     e7c:	00000e00 	.word	0x00000e00

00000e80 <read_LEDs_ASM>:
     e80:	e59f1010 	ldr	r1, [pc, #16]	; e98 <write_LEDs_ASM+0xc>
     e84:	e5910000 	ldr	r0, [r1]
     e88:	e12fff1e 	bx	lr

00000e8c <write_LEDs_ASM>:
     e8c:	e59f1004 	ldr	r1, [pc, #4]	; e98 <write_LEDs_ASM+0xc>
     e90:	e5810000 	str	r0, [r1]
     e94:	e12fff1e 	bx	lr
     e98:	ff200000 	.word	0xff200000

00000e9c <audio_read_data_ASM>:
     e9c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ea0:	e92d0003 	push	{r0, r1}
     ea4:	eb000093 	bl	10f8 <audio_read_ralc_ASM>
     ea8:	e3500000 	cmp	r0, #0
     eac:	08bd0003 	popeq	{r0, r1}
     eb0:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     eb4:	03a00000 	moveq	r0, #0
     eb8:	012fff1e 	bxeq	lr
     ebc:	eb000092 	bl	110c <audio_read_rarc_ASM>
     ec0:	e3500000 	cmp	r0, #0
     ec4:	08bd0003 	popeq	{r0, r1}
     ec8:	03a00000 	moveq	r0, #0
     ecc:	012fff1e 	bxeq	lr
     ed0:	e8bd0003 	pop	{r0, r1}
     ed4:	e59f2240 	ldr	r2, [pc, #576]	; 111c <audio_read_rarc_ASM+0x10>
     ed8:	e5922000 	ldr	r2, [r2]
     edc:	e5802000 	str	r2, [r0]
     ee0:	e59f3238 	ldr	r3, [pc, #568]	; 1120 <audio_read_rarc_ASM+0x14>
     ee4:	e5933000 	ldr	r3, [r3]
     ee8:	e5813000 	str	r3, [r1]
     eec:	e3a00001 	mov	r0, #1

00000ef0 <audio_read_leftdata_ASM>:
     ef0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ef4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     ef8:	eb00007e 	bl	10f8 <audio_read_ralc_ASM>
     efc:	e3500000 	cmp	r0, #0
     f00:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     f04:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f08:	03a00000 	moveq	r0, #0
     f0c:	012fff1e 	bxeq	lr
     f10:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     f14:	e59f2200 	ldr	r2, [pc, #512]	; 111c <audio_read_rarc_ASM+0x10>
     f18:	e5922000 	ldr	r2, [r2]
     f1c:	e5802000 	str	r2, [r0]
     f20:	e3a00001 	mov	r0, #1
     f24:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     f28:	e12fff1e 	bx	lr

00000f2c <audio_read_rightdata_ASM>:
     f2c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f30:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     f34:	eb000074 	bl	110c <audio_read_rarc_ASM>
     f38:	e3500000 	cmp	r0, #0
     f3c:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     f40:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f44:	03a00000 	moveq	r0, #0
     f48:	012fff1e 	bxeq	lr
     f4c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     f50:	e59f21c8 	ldr	r2, [pc, #456]	; 1120 <audio_read_rarc_ASM+0x14>
     f54:	e5922000 	ldr	r2, [r2]
     f58:	e5802000 	str	r2, [r0]
     f5c:	e3a00001 	mov	r0, #1
     f60:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     f64:	e12fff1e 	bx	lr

00000f68 <audio_write_data_ASM>:
     f68:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f6c:	e92d0003 	push	{r0, r1}
     f70:	eb000056 	bl	10d0 <audio_read_wslc_ASM>
     f74:	e3500000 	cmp	r0, #0
     f78:	08bd0003 	popeq	{r0, r1}
     f7c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f80:	03a00000 	moveq	r0, #0
     f84:	012fff1e 	bxeq	lr
     f88:	eb000055 	bl	10e4 <audio_read_wsrc_ASM>
     f8c:	e3500000 	cmp	r0, #0
     f90:	08bd0003 	popeq	{r0, r1}
     f94:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f98:	03a00000 	moveq	r0, #0
     f9c:	012fff1e 	bxeq	lr
     fa0:	e8bd0003 	pop	{r0, r1}
     fa4:	e59f2170 	ldr	r2, [pc, #368]	; 111c <audio_read_rarc_ASM+0x10>
     fa8:	e5820000 	str	r0, [r2]
     fac:	e59f316c 	ldr	r3, [pc, #364]	; 1120 <audio_read_rarc_ASM+0x14>
     fb0:	e5831000 	str	r1, [r3]
     fb4:	e3a00001 	mov	r0, #1
     fb8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     fbc:	e12fff1e 	bx	lr

00000fc0 <audio_write_leftdata_ASM>:
     fc0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     fc4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     fc8:	eb000040 	bl	10d0 <audio_read_wslc_ASM>
     fcc:	e3500000 	cmp	r0, #0
     fd0:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     fd4:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     fd8:	03a00000 	moveq	r0, #0
     fdc:	012fff1e 	bxeq	lr
     fe0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     fe4:	e59f2130 	ldr	r2, [pc, #304]	; 111c <audio_read_rarc_ASM+0x10>
     fe8:	e5820000 	str	r0, [r2]
     fec:	e3a00001 	mov	r0, #1
     ff0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     ff4:	e12fff1e 	bx	lr

00000ff8 <audio_write_rightdata_ASM>:
     ff8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ffc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    1000:	eb000037 	bl	10e4 <audio_read_wsrc_ASM>
    1004:	e3500000 	cmp	r0, #0
    1008:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    100c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    1010:	03a00000 	moveq	r0, #0
    1014:	012fff1e 	bxeq	lr
    1018:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    101c:	e59f20fc 	ldr	r2, [pc, #252]	; 1120 <audio_read_rarc_ASM+0x14>
    1020:	e5820000 	str	r0, [r2]
    1024:	e3a00001 	mov	r0, #1
    1028:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    102c:	e12fff1e 	bx	lr

00001030 <audio_enable_read_fifo_clear_ASM>:
    1030:	e59f00ec 	ldr	r0, [pc, #236]	; 1124 <audio_read_rarc_ASM+0x18>
    1034:	e5901000 	ldr	r1, [r0]
    1038:	e3811004 	orr	r1, r1, #4
    103c:	e5801000 	str	r1, [r0]
    1040:	e12fff1e 	bx	lr

00001044 <audio_enable_write_fifo_clear_ASM>:
    1044:	e59f00d8 	ldr	r0, [pc, #216]	; 1124 <audio_read_rarc_ASM+0x18>
    1048:	e5901000 	ldr	r1, [r0]
    104c:	e3811008 	orr	r1, r1, #8
    1050:	e5801000 	str	r1, [r0]
    1054:	e12fff1e 	bx	lr

00001058 <audio_disable_read_fifo_clear_ASM>:
    1058:	e59f00c4 	ldr	r0, [pc, #196]	; 1124 <audio_read_rarc_ASM+0x18>
    105c:	e5901000 	ldr	r1, [r0]
    1060:	e3c11004 	bic	r1, r1, #4
    1064:	e5801000 	str	r1, [r0]
    1068:	e12fff1e 	bx	lr

0000106c <audio_disable_write_fifo_clear_ASM>:
    106c:	e59f00b0 	ldr	r0, [pc, #176]	; 1124 <audio_read_rarc_ASM+0x18>
    1070:	e5901000 	ldr	r1, [r0]
    1074:	e3c11008 	bic	r1, r1, #8
    1078:	e5801000 	str	r1, [r0]
    107c:	e12fff1e 	bx	lr

00001080 <audio_enable_read_int_ASM>:
    1080:	e59f009c 	ldr	r0, [pc, #156]	; 1124 <audio_read_rarc_ASM+0x18>
    1084:	e5901000 	ldr	r1, [r0]
    1088:	e3811001 	orr	r1, r1, #1
    108c:	e5801000 	str	r1, [r0]
    1090:	e12fff1e 	bx	lr

00001094 <audio_enable_write_int_ASM>:
    1094:	e59f0088 	ldr	r0, [pc, #136]	; 1124 <audio_read_rarc_ASM+0x18>
    1098:	e5901000 	ldr	r1, [r0]
    109c:	e3811002 	orr	r1, r1, #2
    10a0:	e5801000 	str	r1, [r0]
    10a4:	e12fff1e 	bx	lr

000010a8 <audio_disable_read_int_ASM>:
    10a8:	e59f0074 	ldr	r0, [pc, #116]	; 1124 <audio_read_rarc_ASM+0x18>
    10ac:	e5901000 	ldr	r1, [r0]
    10b0:	e3c11001 	bic	r1, r1, #1
    10b4:	e5801000 	str	r1, [r0]
    10b8:	e12fff1e 	bx	lr

000010bc <audio_disable_write_int_ASM>:
    10bc:	e59f0060 	ldr	r0, [pc, #96]	; 1124 <audio_read_rarc_ASM+0x18>
    10c0:	e5901000 	ldr	r1, [r0]
    10c4:	e3c11002 	bic	r1, r1, #2
    10c8:	e5801000 	str	r1, [r0]
    10cc:	e12fff1e 	bx	lr

000010d0 <audio_read_wslc_ASM>:
    10d0:	e59f0050 	ldr	r0, [pc, #80]	; 1128 <audio_read_rarc_ASM+0x1c>
    10d4:	e5900000 	ldr	r0, [r0]
    10d8:	e1a00c20 	lsr	r0, r0, #24
    10dc:	e20000ff 	and	r0, r0, #255	; 0xff
    10e0:	e12fff1e 	bx	lr

000010e4 <audio_read_wsrc_ASM>:
    10e4:	e59f003c 	ldr	r0, [pc, #60]	; 1128 <audio_read_rarc_ASM+0x1c>
    10e8:	e5900000 	ldr	r0, [r0]
    10ec:	e1a00820 	lsr	r0, r0, #16
    10f0:	e20000ff 	and	r0, r0, #255	; 0xff
    10f4:	e12fff1e 	bx	lr

000010f8 <audio_read_ralc_ASM>:
    10f8:	e59f0028 	ldr	r0, [pc, #40]	; 1128 <audio_read_rarc_ASM+0x1c>
    10fc:	e5900000 	ldr	r0, [r0]
    1100:	e1a00420 	lsr	r0, r0, #8
    1104:	e20000ff 	and	r0, r0, #255	; 0xff
    1108:	e12fff1e 	bx	lr

0000110c <audio_read_rarc_ASM>:
    110c:	e59f0014 	ldr	r0, [pc, #20]	; 1128 <audio_read_rarc_ASM+0x1c>
    1110:	e5900000 	ldr	r0, [r0]
    1114:	e20000ff 	and	r0, r0, #255	; 0xff
    1118:	e12fff1e 	bx	lr
    111c:	ff203048 	.word	0xff203048
    1120:	ff20304c 	.word	0xff20304c
    1124:	ff203040 	.word	0xff203040
    1128:	ff203044 	.word	0xff203044

0000112c <read_ps2_data_ASM>:
    112c:	e59f114c 	ldr	r1, [pc, #332]	; 1280 <ps2_fifo_ravail+0x4>
    1130:	e5911000 	ldr	r1, [r1]
    1134:	e3a02902 	mov	r2, #32768	; 0x8000
    1138:	e1110002 	tst	r1, r2
    113c:	03a00000 	moveq	r0, #0
    1140:	012fff1e 	bxeq	lr
    1144:	e20120ff 	and	r2, r1, #255	; 0xff
    1148:	e5c02000 	strb	r2, [r0]
    114c:	e59f2130 	ldr	r2, [pc, #304]	; 1284 <ps2_fifo_ravail+0x8>
    1150:	e0010002 	and	r0, r1, r2
    1154:	e1a00820 	lsr	r0, r0, #16
    1158:	e12fff1e 	bx	lr

0000115c <enable_ps2_int_ASM>:
    115c:	e59f011c 	ldr	r0, [pc, #284]	; 1280 <ps2_fifo_ravail+0x4>
    1160:	e3a01001 	mov	r1, #1
    1164:	e5c01004 	strb	r1, [r0, #4]
    1168:	e12fff1e 	bx	lr

0000116c <disable_ps2_int_ASM>:
    116c:	e59f010c 	ldr	r0, [pc, #268]	; 1280 <ps2_fifo_ravail+0x4>
    1170:	e3a01000 	mov	r1, #0
    1174:	e5c01004 	strb	r1, [r0, #4]
    1178:	e12fff1e 	bx	lr

0000117c <ps2_fifo_data>:
	...

0000127c <ps2_fifo_ravail>:
    127c:	00000000 	.word	0x00000000
    1280:	ff200100 	.word	0xff200100
    1284:	ffff0000 	.word	0xffff0000

00001288 <read_PB_data_ASM>:
    1288:	e59f1074 	ldr	r1, [pc, #116]	; 1304 <disable_PB_INT_ASM+0x14>
    128c:	e5910000 	ldr	r0, [r1]
    1290:	e12fff1e 	bx	lr

00001294 <PB_data_is_pressed_ASM>:
    1294:	e59f1068 	ldr	r1, [pc, #104]	; 1304 <disable_PB_INT_ASM+0x14>
    1298:	e5912000 	ldr	r2, [r1]
    129c:	e0000002 	and	r0, r0, r2
    12a0:	e3300000 	teq	r0, #0
    12a4:	13a00001 	movne	r0, #1
    12a8:	e12fff1e 	bx	lr

000012ac <read_PB_edgecap_ASM>:
    12ac:	e59f1054 	ldr	r1, [pc, #84]	; 1308 <disable_PB_INT_ASM+0x18>
    12b0:	e5910000 	ldr	r0, [r1]
    12b4:	e12fff1e 	bx	lr

000012b8 <PB_edgecap_is_pressed_ASM>:
    12b8:	e59f1048 	ldr	r1, [pc, #72]	; 1308 <disable_PB_INT_ASM+0x18>
    12bc:	e5912000 	ldr	r2, [r1]
    12c0:	e0000002 	and	r0, r0, r2
    12c4:	e3300000 	teq	r0, #0
    12c8:	13a00001 	movne	r0, #1
    12cc:	e12fff1e 	bx	lr

000012d0 <PB_clear_edgecp_ASM>:
    12d0:	e59f1030 	ldr	r1, [pc, #48]	; 1308 <disable_PB_INT_ASM+0x18>
    12d4:	e5810000 	str	r0, [r1]
    12d8:	e12fff1e 	bx	lr

000012dc <enable_PB_INT_ASM>:
    12dc:	e59f1028 	ldr	r1, [pc, #40]	; 130c <disable_PB_INT_ASM+0x1c>
    12e0:	e5912000 	ldr	r2, [r1]
    12e4:	e1800002 	orr	r0, r0, r2
    12e8:	e5810000 	str	r0, [r1]
    12ec:	e12fff1e 	bx	lr

000012f0 <disable_PB_INT_ASM>:
    12f0:	e59f1014 	ldr	r1, [pc, #20]	; 130c <disable_PB_INT_ASM+0x1c>
    12f4:	e5912000 	ldr	r2, [r1]
    12f8:	e1c00002 	bic	r0, r0, r2
    12fc:	e5810000 	str	r0, [r1]
    1300:	e12fff1e 	bx	lr
    1304:	ff200050 	.word	0xff200050
    1308:	ff20005c 	.word	0xff20005c
    130c:	ff200058 	.word	0xff200058

00001310 <read_slider_switches_ASM>:
    1310:	e59f1004 	ldr	r1, [pc, #4]	; 131c <read_slider_switches_ASM+0xc>
    1314:	e5910000 	ldr	r0, [r1]
    1318:	e12fff1e 	bx	lr
    131c:	ff200040 	.word	0xff200040

00001320 <VGA_clear_charbuff_ASM>:
    1320:	e92d0030 	push	{r4, r5}
    1324:	e3a02000 	mov	r2, #0
    1328:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    132c:	e3a00000 	mov	r0, #0

00001330 <CHAR_LOOPX>:
    1330:	e3a01000 	mov	r1, #0
    1334:	e0834000 	add	r4, r3, r0

00001338 <CHAR_LOOPY>:
    1338:	e0845381 	add	r5, r4, r1, lsl #7
    133c:	e5c52000 	strb	r2, [r5]
    1340:	e2811001 	add	r1, r1, #1
    1344:	e351003c 	cmp	r1, #60	; 0x3c
    1348:	bafffffa 	blt	1338 <CHAR_LOOPY>
    134c:	e2800001 	add	r0, r0, #1
    1350:	e3500050 	cmp	r0, #80	; 0x50
    1354:	bafffff5 	blt	1330 <CHAR_LOOPX>
    1358:	e8bd0030 	pop	{r4, r5}
    135c:	e12fff1e 	bx	lr

00001360 <VGA_clear_pixelbuff_ASM>:
    1360:	e92d0030 	push	{r4, r5}
    1364:	e3a02000 	mov	r2, #0
    1368:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    136c:	e3a00000 	mov	r0, #0

00001370 <PIXEL_LOOPX>:
    1370:	e3a01000 	mov	r1, #0
    1374:	e0834080 	add	r4, r3, r0, lsl #1

00001378 <PIXEL_LOOPY>:
    1378:	e0845501 	add	r5, r4, r1, lsl #10
    137c:	e1c520b0 	strh	r2, [r5]
    1380:	e2811001 	add	r1, r1, #1
    1384:	e35100f0 	cmp	r1, #240	; 0xf0
    1388:	bafffffa 	blt	1378 <PIXEL_LOOPY>
    138c:	e2800001 	add	r0, r0, #1
    1390:	e3500d05 	cmp	r0, #320	; 0x140
    1394:	bafffff5 	blt	1370 <PIXEL_LOOPX>
    1398:	e8bd0030 	pop	{r4, r5}
    139c:	e12fff1e 	bx	lr

000013a0 <VGA_write_char_ASM>:
    13a0:	e3500000 	cmp	r0, #0
    13a4:	b12fff1e 	bxlt	lr
    13a8:	e3510000 	cmp	r1, #0
    13ac:	b12fff1e 	bxlt	lr
    13b0:	e350004f 	cmp	r0, #79	; 0x4f
    13b4:	c12fff1e 	bxgt	lr
    13b8:	e351003b 	cmp	r1, #59	; 0x3b
    13bc:	c12fff1e 	bxgt	lr
    13c0:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    13c4:	e0833000 	add	r3, r3, r0
    13c8:	e0833381 	add	r3, r3, r1, lsl #7
    13cc:	e5c32000 	strb	r2, [r3]
    13d0:	e12fff1e 	bx	lr

000013d4 <VGA_write_byte_ASM>:
    13d4:	e3500000 	cmp	r0, #0
    13d8:	b12fff1e 	bxlt	lr
    13dc:	e3510000 	cmp	r1, #0
    13e0:	b12fff1e 	bxlt	lr
    13e4:	e350004e 	cmp	r0, #78	; 0x4e
    13e8:	c12fff1e 	bxgt	lr
    13ec:	e351003b 	cmp	r1, #59	; 0x3b
    13f0:	c12fff1e 	bxgt	lr
    13f4:	e92d0030 	push	{r4, r5}
    13f8:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    13fc:	e20250f0 	and	r5, r2, #240	; 0xf0
    1400:	e1a05225 	lsr	r5, r5, #4
    1404:	e202400f 	and	r4, r2, #15
    1408:	e59f2068 	ldr	r2, [pc, #104]	; 1478 <HEX_ASCII+0x10>
    140c:	e7d25005 	ldrb	r5, [r2, r5]
    1410:	e7d24004 	ldrb	r4, [r2, r4]
    1414:	e0833000 	add	r3, r3, r0
    1418:	e0833381 	add	r3, r3, r1, lsl #7
    141c:	e5c35000 	strb	r5, [r3]
    1420:	e2833001 	add	r3, r3, #1
    1424:	e5c34000 	strb	r4, [r3]
    1428:	e8bd0030 	pop	{r4, r5}
    142c:	e12fff1e 	bx	lr

00001430 <VGA_draw_point_ASM>:
    1430:	e59f3044 	ldr	r3, [pc, #68]	; 147c <HEX_ASCII+0x14>
    1434:	e3500000 	cmp	r0, #0
    1438:	b12fff1e 	bxlt	lr
    143c:	e3510000 	cmp	r1, #0
    1440:	b12fff1e 	bxlt	lr
    1444:	e1500003 	cmp	r0, r3
    1448:	c12fff1e 	bxgt	lr
    144c:	e35100ef 	cmp	r1, #239	; 0xef
    1450:	c12fff1e 	bxgt	lr
    1454:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1458:	e0833080 	add	r3, r3, r0, lsl #1
    145c:	e0833501 	add	r3, r3, r1, lsl #10
    1460:	e1c320b0 	strh	r2, [r3]
    1464:	e12fff1e 	bx	lr

00001468 <HEX_ASCII>:
    1468:	33323130 	.word	0x33323130
    146c:	37363534 	.word	0x37363534
    1470:	42413938 	.word	0x42413938
    1474:	46454443 	.word	0x46454443
    1478:	00001468 	.word	0x00001468
    147c:	0000013f 	.word	0x0000013f

00001480 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
    1480:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1484:	e28db000 	add	r11, sp, #0
    1488:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
    148c:	e3a030d3 	mov	r3, #211	; 0xd3
    1490:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    1494:	e51b3008 	ldr	r3, [r11, #-8]
    1498:	e129f003 	msr	CPSR_fc, r3
}
    149c:	e28bd000 	add	sp, r11, #0
    14a0:	e8bd0800 	ldmfd	sp!, {r11}
    14a4:	e12fff1e 	bx	lr

000014a8 <enable_A9_interrupts>:

void enable_A9_interrupts() {
    14a8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    14ac:	e28db000 	add	r11, sp, #0
    14b0:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
    14b4:	e3a03053 	mov	r3, #83	; 0x53
    14b8:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    14bc:	e51b3008 	ldr	r3, [r11, #-8]
    14c0:	e129f003 	msr	CPSR_fc, r3
}
    14c4:	e28bd000 	add	sp, r11, #0
    14c8:	e8bd0800 	ldmfd	sp!, {r11}
    14cc:	e12fff1e 	bx	lr

000014d0 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
    14d0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    14d4:	e28db000 	add	r11, sp, #0
    14d8:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
    14dc:	e3e03007 	mvn	r3, #7
    14e0:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
    14e4:	e3a030d2 	mov	r3, #210	; 0xd2
    14e8:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    14ec:	e51b300c 	ldr	r3, [r11, #-12]
    14f0:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
    14f4:	e51b3008 	ldr	r3, [r11, #-8]
    14f8:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
    14fc:	e3a030d3 	mov	r3, #211	; 0xd3
    1500:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    1504:	e51b300c 	ldr	r3, [r11, #-12]
    1508:	e129f003 	msr	CPSR_fc, r3
}
    150c:	e28bd000 	add	sp, r11, #0
    1510:	e8bd0800 	ldmfd	sp!, {r11}
    1514:	e12fff1e 	bx	lr

00001518 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
    1518:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    151c:	e28db000 	add	r11, sp, #0
    1520:	e24dd01c 	sub	sp, sp, #28
    1524:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    1528:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
    152c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1530:	e1a031c3 	asr	r3, r3, #3
    1534:	e3c33003 	bic	r3, r3, #3
    1538:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
    153c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1540:	e203301f 	and	r3, r3, #31
    1544:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
    1548:	e3a02001 	mov	r2, #1
    154c:	e51b300c 	ldr	r3, [r11, #-12]
    1550:	e1a03312 	lsl	r3, r2, r3
    1554:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
    1558:	e51b3008 	ldr	r3, [r11, #-8]
    155c:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
    1560:	e2433c03 	sub	r3, r3, #768	; 0x300
    1564:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
    1568:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    156c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1570:	e5921000 	ldr	r1, [r2]
    1574:	e51b2010 	ldr	r2, [r11, #-16]
    1578:	e1812002 	orr	r2, r1, r2
    157c:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
    1580:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1584:	e3c33003 	bic	r3, r3, #3
    1588:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
    158c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1590:	e2033003 	and	r3, r3, #3
    1594:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
    1598:	e51b2008 	ldr	r2, [r11, #-8]
    159c:	e51b300c 	ldr	r3, [r11, #-12]
    15a0:	e0823003 	add	r3, r2, r3
    15a4:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
    15a8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
    15ac:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    15b0:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    15b4:	e6ef2072 	uxtb	r2, r2
    15b8:	e5c32000 	strb	r2, [r3]
}
    15bc:	e28bd000 	add	sp, r11, #0
    15c0:	e8bd0800 	ldmfd	sp!, {r11}
    15c4:	e12fff1e 	bx	lr

000015c8 <config_GIC>:

void config_GIC(int len, int* IDs) {
    15c8:	e92d4800 	push	{r11, lr}
    15cc:	e28db004 	add	r11, sp, #4
    15d0:	e24dd010 	sub	sp, sp, #16
    15d4:	e50b0010 	str	r0, [r11, #-16]
    15d8:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
    15dc:	e3a03000 	mov	r3, #0
    15e0:	e50b3008 	str	r3, [r11, #-8]
    15e4:	ea00000a 	b	1614 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
    15e8:	e51b3008 	ldr	r3, [r11, #-8]
    15ec:	e1a03103 	lsl	r3, r3, #2
    15f0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    15f4:	e0823003 	add	r3, r2, r3
    15f8:	e5933000 	ldr	r3, [r3]
    15fc:	e1a00003 	mov	r0, r3
    1600:	e3a01001 	mov	r1, #1
    1604:	ebffffc3 	bl	1518 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
    1608:	e51b3008 	ldr	r3, [r11, #-8]
    160c:	e2833001 	add	r3, r3, #1
    1610:	e50b3008 	str	r3, [r11, #-8]
    1614:	e51b2008 	ldr	r2, [r11, #-8]
    1618:	e51b3010 	ldr	r3, [r11, #-16]
    161c:	e1520003 	cmp	r2, r3
    1620:	bafffff0 	blt	15e8 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
    1624:	e30c3104 	movw	r3, #49412	; 0xc104
    1628:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    162c:	e30f2fff 	movw	r2, #65535	; 0xffff
    1630:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
    1634:	e3a03cc1 	mov	r3, #49408	; 0xc100
    1638:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    163c:	e3a02001 	mov	r2, #1
    1640:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
    1644:	e3a03a0d 	mov	r3, #53248	; 0xd000
    1648:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    164c:	e3a02001 	mov	r2, #1
    1650:	e5832000 	str	r2, [r3]
}
    1654:	e24bd004 	sub	sp, r11, #4
    1658:	e8bd8800 	pop	{r11, pc}

0000165c <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
    165c:	e24ee004 	sub	lr, lr, #4
    1660:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
    1664:	e28db018 	add	r11, sp, #24
    1668:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
    166c:	e30c310c 	movw	r3, #49420	; 0xc10c
    1670:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1674:	e5933000 	ldr	r3, [r3]
    1678:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
    167c:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1680:	e3530053 	cmp	r3, #83	; 0x53
    1684:	0a00003d 	beq	1780 <__cs3_isr_irq+0x124>
    1688:	e3530053 	cmp	r3, #83	; 0x53
    168c:	ca000011 	bgt	16d8 <__cs3_isr_irq+0x7c>
    1690:	e353004e 	cmp	r3, #78	; 0x4e
    1694:	0a000031 	beq	1760 <__cs3_isr_irq+0x104>
    1698:	e353004e 	cmp	r3, #78	; 0x4e
    169c:	ca000006 	bgt	16bc <__cs3_isr_irq+0x60>
    16a0:	e3530048 	cmp	r3, #72	; 0x48
    16a4:	0a000029 	beq	1750 <__cs3_isr_irq+0xf4>
    16a8:	e3530049 	cmp	r3, #73	; 0x49
    16ac:	0a000029 	beq	1758 <__cs3_isr_irq+0xfc>
    16b0:	e353001d 	cmp	r3, #29
    16b4:	0a000019 	beq	1720 <__cs3_isr_irq+0xc4>
    16b8:	ea000036 	b	1798 <__cs3_isr_irq+0x13c>
    16bc:	e3530050 	cmp	r3, #80	; 0x50
    16c0:	0a00002a 	beq	1770 <__cs3_isr_irq+0x114>
    16c4:	e3530050 	cmp	r3, #80	; 0x50
    16c8:	ba000026 	blt	1768 <__cs3_isr_irq+0x10c>
    16cc:	e3530051 	cmp	r3, #81	; 0x51
    16d0:	0a000028 	beq	1778 <__cs3_isr_irq+0x11c>
    16d4:	ea00002f 	b	1798 <__cs3_isr_irq+0x13c>
    16d8:	e35300c7 	cmp	r3, #199	; 0xc7
    16dc:	0a000013 	beq	1730 <__cs3_isr_irq+0xd4>
    16e0:	e35300c7 	cmp	r3, #199	; 0xc7
    16e4:	ca000006 	bgt	1704 <__cs3_isr_irq+0xa8>
    16e8:	e3530059 	cmp	r3, #89	; 0x59
    16ec:	0a000027 	beq	1790 <__cs3_isr_irq+0x134>
    16f0:	e35300c5 	cmp	r3, #197	; 0xc5
    16f4:	0a00000b 	beq	1728 <__cs3_isr_irq+0xcc>
    16f8:	e3530054 	cmp	r3, #84	; 0x54
    16fc:	0a000021 	beq	1788 <__cs3_isr_irq+0x12c>
    1700:	ea000024 	b	1798 <__cs3_isr_irq+0x13c>
    1704:	e35300c9 	cmp	r3, #201	; 0xc9
    1708:	0a00000c 	beq	1740 <__cs3_isr_irq+0xe4>
    170c:	e35300c9 	cmp	r3, #201	; 0xc9
    1710:	ba000008 	blt	1738 <__cs3_isr_irq+0xdc>
    1714:	e35300ca 	cmp	r3, #202	; 0xca
    1718:	0a00000a 	beq	1748 <__cs3_isr_irq+0xec>
    171c:	ea00001d 	b	1798 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
    1720:	ebfffdb7 	bl	e04 <A9_PRIV_TIM_ISR>
    1724:	ea00001c 	b	179c <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
    1728:	ebfffdb6 	bl	e08 <HPS_GPIO1_ISR>
    172c:	ea00001a 	b	179c <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
    1730:	ebfffdb5 	bl	e0c <HPS_TIM0_ISR>
    1734:	ea000018 	b	179c <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
    1738:	ebfffdbb 	bl	e2c <HPS_TIM1_ISR>
    173c:	ea000016 	b	179c <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
    1740:	ebfffdc1 	bl	e4c <HPS_TIM2_ISR>
    1744:	ea000014 	b	179c <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
    1748:	ebfffdc0 	bl	e50 <HPS_TIM3_ISR>
    174c:	ea000012 	b	179c <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
    1750:	ebfffdbf 	bl	e54 <FPGA_INTERVAL_TIM_ISR>
    1754:	ea000010 	b	179c <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
    1758:	ebfffdbe 	bl	e58 <FPGA_PB_KEYS_ISR>
    175c:	ea00000e 	b	179c <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
    1760:	ebfffdbd 	bl	e5c <FPGA_Audio_ISR>
    1764:	ea00000c 	b	179c <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
    1768:	ebfffdbc 	bl	e60 <FPGA_PS2_ISR>
    176c:	ea00000a 	b	179c <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
    1770:	ebfffdbb 	bl	e64 <FPGA_JTAG_ISR>
    1774:	ea000008 	b	179c <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
    1778:	ebfffdba 	bl	e68 <FPGA_IrDA_ISR>
    177c:	ea000006 	b	179c <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
    1780:	ebfffdb9 	bl	e6c <FPGA_JP1_ISR>
    1784:	ea000004 	b	179c <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
    1788:	ebfffdb8 	bl	e70 <FPGA_JP2_ISR>
    178c:	ea000002 	b	179c <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
    1790:	ebfffdb7 	bl	e74 <FPGA_PS2_DUAL_ISR>
    1794:	ea000000 	b	179c <__cs3_isr_irq+0x140>
	
		default: while(1); break;
    1798:	eafffffe 	b	1798 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
    179c:	e30c3110 	movw	r3, #49424	; 0xc110
    17a0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    17a4:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    17a8:	e5832000 	str	r2, [r3]
}
    17ac:	e24bd018 	sub	sp, r11, #24
    17b0:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

000017b4 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
    17b4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    17b8:	e28db000 	add	r11, sp, #0
	while(1);
    17bc:	eafffffe 	b	17bc <__cs3_reset+0x8>

000017c0 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
    17c0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    17c4:	e28db000 	add	r11, sp, #0
	while(1);
    17c8:	eafffffe 	b	17c8 <__cs3_isr_undef+0x8>

000017cc <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
    17cc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    17d0:	e28db000 	add	r11, sp, #0
	while(1);
    17d4:	eafffffe 	b	17d4 <__cs3_isr_swi+0x8>

000017d8 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
    17d8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    17dc:	e28db000 	add	r11, sp, #0
	while(1);
    17e0:	eafffffe 	b	17e0 <__cs3_isr_pabort+0x8>

000017e4 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
    17e4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    17e8:	e28db000 	add	r11, sp, #0
	while(1);
    17ec:	eafffffe 	b	17ec <__cs3_isr_dabort+0x8>

000017f0 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
    17f0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    17f4:	e28db000 	add	r11, sp, #0
	while(1);
    17f8:	eafffffe 	b	17f8 <__cs3_isr_fiq+0x8>

000017fc <fix_bug>:
}

void fix_bug() {
    17fc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1800:	e28db000 	add	r11, sp, #0
    1804:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
    1808:	e30d3198 	movw	r3, #53656	; 0xd198
    180c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1810:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
    1814:	e51b3008 	ldr	r3, [r11, #-8]
    1818:	e3a02703 	mov	r2, #786432	; 0xc0000
    181c:	e5832000 	str	r2, [r3]
}
    1820:	e28bd000 	add	sp, r11, #0
    1824:	e8bd0800 	ldmfd	sp!, {r11}
    1828:	e12fff1e 	bx	lr

0000182c <int_setup>:

void int_setup(int len, int* IDs) {
    182c:	e92d4800 	push	{r11, lr}
    1830:	e28db004 	add	r11, sp, #4
    1834:	e24dd008 	sub	sp, sp, #8
    1838:	e50b0008 	str	r0, [r11, #-8]
    183c:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
    1840:	ebffff0e 	bl	1480 <disable_A9_interrupts>
	set_A9_IRQ_stack();
    1844:	ebffff21 	bl	14d0 <set_A9_IRQ_stack>
	fix_bug();
    1848:	ebffffeb 	bl	17fc <fix_bug>
	config_GIC(len, IDs);
    184c:	e51b0008 	ldr	r0, [r11, #-8]
    1850:	e51b100c 	ldr	r1, [r11, #-12]
    1854:	ebffff5b 	bl	15c8 <config_GIC>
	enable_A9_interrupts();
    1858:	ebffff12 	bl	14a8 <enable_A9_interrupts>
}
    185c:	e24bd004 	sub	sp, r11, #4
    1860:	e8bd8800 	pop	{r11, pc}

00001864 <__aeabi_drsub>:
    1864:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    1868:	ea000000 	b	1870 <__adddf3>

0000186c <__aeabi_dsub>:
    186c:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001870 <__adddf3>:
    1870:	e92d4030 	push	{r4, r5, lr}
    1874:	e1a04081 	lsl	r4, r1, #1
    1878:	e1a05083 	lsl	r5, r3, #1
    187c:	e1340005 	teq	r4, r5
    1880:	01300002 	teqeq	r0, r2
    1884:	1194c000 	orrsne	r12, r4, r0
    1888:	1195c002 	orrsne	r12, r5, r2
    188c:	11f0cac4 	mvnsne	r12, r4, asr #21
    1890:	11f0cac5 	mvnsne	r12, r5, asr #21
    1894:	0a00008c 	beq	1acc <__adddf3+0x25c>
    1898:	e1a04aa4 	lsr	r4, r4, #21
    189c:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    18a0:	b2655000 	rsblt	r5, r5, #0
    18a4:	da000006 	ble	18c4 <__adddf3+0x54>
    18a8:	e0844005 	add	r4, r4, r5
    18ac:	e0202002 	eor	r2, r0, r2
    18b0:	e0213003 	eor	r3, r1, r3
    18b4:	e0220000 	eor	r0, r2, r0
    18b8:	e0231001 	eor	r1, r3, r1
    18bc:	e0202002 	eor	r2, r0, r2
    18c0:	e0213003 	eor	r3, r1, r3
    18c4:	e3550036 	cmp	r5, #54	; 0x36
    18c8:	88bd4030 	pophi	{r4, r5, lr}
    18cc:	812fff1e 	bxhi	lr
    18d0:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    18d4:	e1a01601 	lsl	r1, r1, #12
    18d8:	e3a0c601 	mov	r12, #1048576	; 0x100000
    18dc:	e18c1621 	orr	r1, r12, r1, lsr #12
    18e0:	0a000001 	beq	18ec <__adddf3+0x7c>
    18e4:	e2700000 	rsbs	r0, r0, #0
    18e8:	e2e11000 	rsc	r1, r1, #0
    18ec:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    18f0:	e1a03603 	lsl	r3, r3, #12
    18f4:	e18c3623 	orr	r3, r12, r3, lsr #12
    18f8:	0a000001 	beq	1904 <__adddf3+0x94>
    18fc:	e2722000 	rsbs	r2, r2, #0
    1900:	e2e33000 	rsc	r3, r3, #0
    1904:	e1340005 	teq	r4, r5
    1908:	0a000069 	beq	1ab4 <__adddf3+0x244>
    190c:	e2444001 	sub	r4, r4, #1
    1910:	e275e020 	rsbs	lr, r5, #32
    1914:	ba000005 	blt	1930 <__adddf3+0xc0>
    1918:	e1a0ce12 	lsl	r12, r2, lr
    191c:	e0900532 	adds	r0, r0, r2, lsr r5
    1920:	e2a11000 	adc	r1, r1, #0
    1924:	e0900e13 	adds	r0, r0, r3, lsl lr
    1928:	e0b11553 	adcs	r1, r1, r3, asr r5
    192c:	ea000006 	b	194c <__adddf3+0xdc>
    1930:	e2455020 	sub	r5, r5, #32
    1934:	e28ee020 	add	lr, lr, #32
    1938:	e3520001 	cmp	r2, #1
    193c:	e1a0ce13 	lsl	r12, r3, lr
    1940:	238cc002 	orrcs	r12, r12, #2
    1944:	e0900553 	adds	r0, r0, r3, asr r5
    1948:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    194c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1950:	5a000002 	bpl	1960 <__adddf3+0xf0>
    1954:	e27cc000 	rsbs	r12, r12, #0
    1958:	e2f00000 	rscs	r0, r0, #0
    195c:	e2e11000 	rsc	r1, r1, #0
    1960:	e3510601 	cmp	r1, #1048576	; 0x100000
    1964:	3a00000f 	bcc	19a8 <__adddf3+0x138>
    1968:	e3510602 	cmp	r1, #2097152	; 0x200000
    196c:	3a000006 	bcc	198c <__adddf3+0x11c>
    1970:	e1b010a1 	lsrs	r1, r1, #1
    1974:	e1b00060 	rrxs	r0, r0
    1978:	e1a0c06c 	rrx	r12, r12
    197c:	e2844001 	add	r4, r4, #1
    1980:	e1a02a84 	lsl	r2, r4, #21
    1984:	e3720501 	cmn	r2, #4194304	; 0x400000
    1988:	2a00006b 	bcs	1b3c <__adddf3+0x2cc>
    198c:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1990:	01b0c0a0 	lsrseq	r12, r0, #1
    1994:	e2b00000 	adcs	r0, r0, #0
    1998:	e0a11a04 	adc	r1, r1, r4, lsl #20
    199c:	e1811005 	orr	r1, r1, r5
    19a0:	e8bd4030 	pop	{r4, r5, lr}
    19a4:	e12fff1e 	bx	lr
    19a8:	e1b0c08c 	lsls	r12, r12, #1
    19ac:	e0b00000 	adcs	r0, r0, r0
    19b0:	e0a11001 	adc	r1, r1, r1
    19b4:	e3110601 	tst	r1, #1048576	; 0x100000
    19b8:	e2444001 	sub	r4, r4, #1
    19bc:	1afffff2 	bne	198c <__adddf3+0x11c>
    19c0:	e3310000 	teq	r1, #0
    19c4:	13a03014 	movne	r3, #20
    19c8:	03a03034 	moveq	r3, #52	; 0x34
    19cc:	01a01000 	moveq	r1, r0
    19d0:	03a00000 	moveq	r0, #0
    19d4:	e1a02001 	mov	r2, r1
    19d8:	e3520801 	cmp	r2, #65536	; 0x10000
    19dc:	21a02822 	lsrcs	r2, r2, #16
    19e0:	22433010 	subcs	r3, r3, #16
    19e4:	e3520c01 	cmp	r2, #256	; 0x100
    19e8:	21a02422 	lsrcs	r2, r2, #8
    19ec:	22433008 	subcs	r3, r3, #8
    19f0:	e3520010 	cmp	r2, #16
    19f4:	21a02222 	lsrcs	r2, r2, #4
    19f8:	22433004 	subcs	r3, r3, #4
    19fc:	e3520004 	cmp	r2, #4
    1a00:	22433002 	subcs	r3, r3, #2
    1a04:	304330a2 	subcc	r3, r3, r2, lsr #1
    1a08:	e04331a2 	sub	r3, r3, r2, lsr #3
    1a0c:	e2532020 	subs	r2, r3, #32
    1a10:	aa000007 	bge	1a34 <__adddf3+0x1c4>
    1a14:	e292200c 	adds	r2, r2, #12
    1a18:	da000004 	ble	1a30 <__adddf3+0x1c0>
    1a1c:	e282c014 	add	r12, r2, #20
    1a20:	e262200c 	rsb	r2, r2, #12
    1a24:	e1a00c11 	lsl	r0, r1, r12
    1a28:	e1a01231 	lsr	r1, r1, r2
    1a2c:	ea000004 	b	1a44 <__adddf3+0x1d4>
    1a30:	e2822014 	add	r2, r2, #20
    1a34:	d262c020 	rsble	r12, r2, #32
    1a38:	e1a01211 	lsl	r1, r1, r2
    1a3c:	d1811c30 	orrle	r1, r1, r0, lsr r12
    1a40:	d1a00210 	lslle	r0, r0, r2
    1a44:	e0544003 	subs	r4, r4, r3
    1a48:	a0811a04 	addge	r1, r1, r4, lsl #20
    1a4c:	a1811005 	orrge	r1, r1, r5
    1a50:	a8bd4030 	popge	{r4, r5, lr}
    1a54:	a12fff1e 	bxge	lr
    1a58:	e1e04004 	mvn	r4, r4
    1a5c:	e254401f 	subs	r4, r4, #31
    1a60:	aa00000f 	bge	1aa4 <__adddf3+0x234>
    1a64:	e294400c 	adds	r4, r4, #12
    1a68:	ca000006 	bgt	1a88 <__adddf3+0x218>
    1a6c:	e2844014 	add	r4, r4, #20
    1a70:	e2642020 	rsb	r2, r4, #32
    1a74:	e1a00430 	lsr	r0, r0, r4
    1a78:	e1800211 	orr	r0, r0, r1, lsl r2
    1a7c:	e1851431 	orr	r1, r5, r1, lsr r4
    1a80:	e8bd4030 	pop	{r4, r5, lr}
    1a84:	e12fff1e 	bx	lr
    1a88:	e264400c 	rsb	r4, r4, #12
    1a8c:	e2642020 	rsb	r2, r4, #32
    1a90:	e1a00230 	lsr	r0, r0, r2
    1a94:	e1800411 	orr	r0, r0, r1, lsl r4
    1a98:	e1a01005 	mov	r1, r5
    1a9c:	e8bd4030 	pop	{r4, r5, lr}
    1aa0:	e12fff1e 	bx	lr
    1aa4:	e1a00431 	lsr	r0, r1, r4
    1aa8:	e1a01005 	mov	r1, r5
    1aac:	e8bd4030 	pop	{r4, r5, lr}
    1ab0:	e12fff1e 	bx	lr
    1ab4:	e3340000 	teq	r4, #0
    1ab8:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    1abc:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    1ac0:	02844001 	addeq	r4, r4, #1
    1ac4:	12455001 	subne	r5, r5, #1
    1ac8:	eaffff8f 	b	190c <__adddf3+0x9c>
    1acc:	e1f0cac4 	mvns	r12, r4, asr #21
    1ad0:	11f0cac5 	mvnsne	r12, r5, asr #21
    1ad4:	0a00001d 	beq	1b50 <__adddf3+0x2e0>
    1ad8:	e1340005 	teq	r4, r5
    1adc:	01300002 	teqeq	r0, r2
    1ae0:	0a000004 	beq	1af8 <__adddf3+0x288>
    1ae4:	e194c000 	orrs	r12, r4, r0
    1ae8:	01a01003 	moveq	r1, r3
    1aec:	01a00002 	moveq	r0, r2
    1af0:	e8bd4030 	pop	{r4, r5, lr}
    1af4:	e12fff1e 	bx	lr
    1af8:	e1310003 	teq	r1, r3
    1afc:	13a01000 	movne	r1, #0
    1b00:	13a00000 	movne	r0, #0
    1b04:	18bd4030 	popne	{r4, r5, lr}
    1b08:	112fff1e 	bxne	lr
    1b0c:	e1b0caa4 	lsrs	r12, r4, #21
    1b10:	1a000004 	bne	1b28 <__adddf3+0x2b8>
    1b14:	e1b00080 	lsls	r0, r0, #1
    1b18:	e0b11001 	adcs	r1, r1, r1
    1b1c:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1b20:	e8bd4030 	pop	{r4, r5, lr}
    1b24:	e12fff1e 	bx	lr
    1b28:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1b2c:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1b30:	38bd4030 	popcc	{r4, r5, lr}
    1b34:	312fff1e 	bxcc	lr
    1b38:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1b3c:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1b40:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1b44:	e3a00000 	mov	r0, #0
    1b48:	e8bd4030 	pop	{r4, r5, lr}
    1b4c:	e12fff1e 	bx	lr
    1b50:	e1f0cac4 	mvns	r12, r4, asr #21
    1b54:	11a01003 	movne	r1, r3
    1b58:	11a00002 	movne	r0, r2
    1b5c:	01f0cac5 	mvnseq	r12, r5, asr #21
    1b60:	11a03001 	movne	r3, r1
    1b64:	11a02000 	movne	r2, r0
    1b68:	e1904601 	orrs	r4, r0, r1, lsl #12
    1b6c:	01925603 	orrseq	r5, r2, r3, lsl #12
    1b70:	01310003 	teqeq	r1, r3
    1b74:	13811702 	orrne	r1, r1, #524288	; 0x80000
    1b78:	e8bd4030 	pop	{r4, r5, lr}
    1b7c:	e12fff1e 	bx	lr

00001b80 <__aeabi_ui2d>:
    1b80:	e3300000 	teq	r0, #0
    1b84:	03a01000 	moveq	r1, #0
    1b88:	012fff1e 	bxeq	lr
    1b8c:	e92d4030 	push	{r4, r5, lr}
    1b90:	e3a04b01 	mov	r4, #1024	; 0x400
    1b94:	e2844032 	add	r4, r4, #50	; 0x32
    1b98:	e3a05000 	mov	r5, #0
    1b9c:	e3a01000 	mov	r1, #0
    1ba0:	eaffff86 	b	19c0 <__adddf3+0x150>

00001ba4 <__aeabi_i2d>:
    1ba4:	e3300000 	teq	r0, #0
    1ba8:	03a01000 	moveq	r1, #0
    1bac:	012fff1e 	bxeq	lr
    1bb0:	e92d4030 	push	{r4, r5, lr}
    1bb4:	e3a04b01 	mov	r4, #1024	; 0x400
    1bb8:	e2844032 	add	r4, r4, #50	; 0x32
    1bbc:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    1bc0:	42600000 	rsbmi	r0, r0, #0
    1bc4:	e3a01000 	mov	r1, #0
    1bc8:	eaffff7c 	b	19c0 <__adddf3+0x150>

00001bcc <__aeabi_f2d>:
    1bcc:	e1b02080 	lsls	r2, r0, #1
    1bd0:	e1a011c2 	asr	r1, r2, #3
    1bd4:	e1a01061 	rrx	r1, r1
    1bd8:	e1a00e02 	lsl	r0, r2, #28
    1bdc:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    1be0:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1be4:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    1be8:	112fff1e 	bxne	lr
    1bec:	e3320000 	teq	r2, #0
    1bf0:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1bf4:	012fff1e 	bxeq	lr
    1bf8:	e92d4030 	push	{r4, r5, lr}
    1bfc:	e3a04d0e 	mov	r4, #896	; 0x380
    1c00:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1c04:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1c08:	eaffff6c 	b	19c0 <__adddf3+0x150>

00001c0c <__aeabi_ul2d>:
    1c0c:	e1902001 	orrs	r2, r0, r1
    1c10:	012fff1e 	bxeq	lr
    1c14:	e92d4030 	push	{r4, r5, lr}
    1c18:	e3a05000 	mov	r5, #0
    1c1c:	ea000006 	b	1c3c <__aeabi_l2d+0x1c>

00001c20 <__aeabi_l2d>:
    1c20:	e1902001 	orrs	r2, r0, r1
    1c24:	012fff1e 	bxeq	lr
    1c28:	e92d4030 	push	{r4, r5, lr}
    1c2c:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1c30:	5a000001 	bpl	1c3c <__aeabi_l2d+0x1c>
    1c34:	e2700000 	rsbs	r0, r0, #0
    1c38:	e2e11000 	rsc	r1, r1, #0
    1c3c:	e3a04b01 	mov	r4, #1024	; 0x400
    1c40:	e2844032 	add	r4, r4, #50	; 0x32
    1c44:	e1b0cb21 	lsrs	r12, r1, #22
    1c48:	0affff44 	beq	1960 <__adddf3+0xf0>
    1c4c:	e3a02003 	mov	r2, #3
    1c50:	e1b0c1ac 	lsrs	r12, r12, #3
    1c54:	12822003 	addne	r2, r2, #3
    1c58:	e1b0c1ac 	lsrs	r12, r12, #3
    1c5c:	12822003 	addne	r2, r2, #3
    1c60:	e08221ac 	add	r2, r2, r12, lsr #3
    1c64:	e2623020 	rsb	r3, r2, #32
    1c68:	e1a0c310 	lsl	r12, r0, r3
    1c6c:	e1a00230 	lsr	r0, r0, r2
    1c70:	e1800311 	orr	r0, r0, r1, lsl r3
    1c74:	e1a01231 	lsr	r1, r1, r2
    1c78:	e0844002 	add	r4, r4, r2
    1c7c:	eaffff37 	b	1960 <__adddf3+0xf0>

00001c80 <__aeabi_dmul>:
    1c80:	e92d4070 	push	{r4, r5, r6, lr}
    1c84:	e3a0c0ff 	mov	r12, #255	; 0xff
    1c88:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1c8c:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1c90:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1c94:	1134000c 	teqne	r4, r12
    1c98:	1135000c 	teqne	r5, r12
    1c9c:	0b000075 	bleq	1e78 <__aeabi_dmul+0x1f8>
    1ca0:	e0844005 	add	r4, r4, r5
    1ca4:	e0216003 	eor	r6, r1, r3
    1ca8:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    1cac:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    1cb0:	e1905601 	orrs	r5, r0, r1, lsl #12
    1cb4:	11925603 	orrsne	r5, r2, r3, lsl #12
    1cb8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1cbc:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    1cc0:	0a00001d 	beq	1d3c <__aeabi_dmul+0xbc>
    1cc4:	e08ec290 	umull	r12, lr, r0, r2
    1cc8:	e3a05000 	mov	r5, #0
    1ccc:	e0a5e291 	umlal	lr, r5, r1, r2
    1cd0:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    1cd4:	e0a5e390 	umlal	lr, r5, r0, r3
    1cd8:	e3a06000 	mov	r6, #0
    1cdc:	e0a65391 	umlal	r5, r6, r1, r3
    1ce0:	e33c0000 	teq	r12, #0
    1ce4:	138ee001 	orrne	lr, lr, #1
    1ce8:	e24440ff 	sub	r4, r4, #255	; 0xff
    1cec:	e3560c02 	cmp	r6, #512	; 0x200
    1cf0:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    1cf4:	2a000002 	bcs	1d04 <__aeabi_dmul+0x84>
    1cf8:	e1b0e08e 	lsls	lr, lr, #1
    1cfc:	e0b55005 	adcs	r5, r5, r5
    1d00:	e0a66006 	adc	r6, r6, r6
    1d04:	e1821586 	orr	r1, r2, r6, lsl #11
    1d08:	e1811aa5 	orr	r1, r1, r5, lsr #21
    1d0c:	e1a00585 	lsl	r0, r5, #11
    1d10:	e1800aae 	orr	r0, r0, lr, lsr #21
    1d14:	e1a0e58e 	lsl	lr, lr, #11
    1d18:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1d1c:	835c0c07 	cmphi	r12, #1792	; 0x700
    1d20:	8a000011 	bhi	1d6c <__aeabi_dmul+0xec>
    1d24:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    1d28:	01b0e0a0 	lsrseq	lr, r0, #1
    1d2c:	e2b00000 	adcs	r0, r0, #0
    1d30:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1d34:	e8bd4070 	pop	{r4, r5, r6, lr}
    1d38:	e12fff1e 	bx	lr
    1d3c:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    1d40:	e1861001 	orr	r1, r6, r1
    1d44:	e1800002 	orr	r0, r0, r2
    1d48:	e0211003 	eor	r1, r1, r3
    1d4c:	e05440ac 	subs	r4, r4, r12, lsr #1
    1d50:	c074500c 	rsbsgt	r5, r4, r12
    1d54:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1d58:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1d5c:	c12fff1e 	bxgt	lr
    1d60:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1d64:	e3a0e000 	mov	lr, #0
    1d68:	e2544001 	subs	r4, r4, #1
    1d6c:	ca00005d 	bgt	1ee8 <__aeabi_dmul+0x268>
    1d70:	e3740036 	cmn	r4, #54	; 0x36
    1d74:	d3a00000 	movle	r0, #0
    1d78:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    1d7c:	d8bd4070 	pople	{r4, r5, r6, lr}
    1d80:	d12fff1e 	bxle	lr
    1d84:	e2644000 	rsb	r4, r4, #0
    1d88:	e2544020 	subs	r4, r4, #32
    1d8c:	aa00001a 	bge	1dfc <__aeabi_dmul+0x17c>
    1d90:	e294400c 	adds	r4, r4, #12
    1d94:	ca00000c 	bgt	1dcc <__aeabi_dmul+0x14c>
    1d98:	e2844014 	add	r4, r4, #20
    1d9c:	e2645020 	rsb	r5, r4, #32
    1da0:	e1a03510 	lsl	r3, r0, r5
    1da4:	e1a00430 	lsr	r0, r0, r4
    1da8:	e1800511 	orr	r0, r0, r1, lsl r5
    1dac:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    1db0:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1db4:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1db8:	e0a21431 	adc	r1, r2, r1, lsr r4
    1dbc:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1dc0:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1dc4:	e8bd4070 	pop	{r4, r5, r6, lr}
    1dc8:	e12fff1e 	bx	lr
    1dcc:	e264400c 	rsb	r4, r4, #12
    1dd0:	e2645020 	rsb	r5, r4, #32
    1dd4:	e1a03410 	lsl	r3, r0, r4
    1dd8:	e1a00530 	lsr	r0, r0, r5
    1ddc:	e1800411 	orr	r0, r0, r1, lsl r4
    1de0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1de4:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1de8:	e2a11000 	adc	r1, r1, #0
    1dec:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1df0:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1df4:	e8bd4070 	pop	{r4, r5, r6, lr}
    1df8:	e12fff1e 	bx	lr
    1dfc:	e2645020 	rsb	r5, r4, #32
    1e00:	e18ee510 	orr	lr, lr, r0, lsl r5
    1e04:	e1a03430 	lsr	r3, r0, r4
    1e08:	e1833511 	orr	r3, r3, r1, lsl r5
    1e0c:	e1a00431 	lsr	r0, r1, r4
    1e10:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1e14:	e1c00431 	bic	r0, r0, r1, lsr r4
    1e18:	e0800fa3 	add	r0, r0, r3, lsr #31
    1e1c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1e20:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1e24:	e8bd4070 	pop	{r4, r5, r6, lr}
    1e28:	e12fff1e 	bx	lr
    1e2c:	e3340000 	teq	r4, #0
    1e30:	1a000008 	bne	1e58 <__aeabi_dmul+0x1d8>
    1e34:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    1e38:	e1b00080 	lsls	r0, r0, #1
    1e3c:	e0a11001 	adc	r1, r1, r1
    1e40:	e3110601 	tst	r1, #1048576	; 0x100000
    1e44:	02444001 	subeq	r4, r4, #1
    1e48:	0afffffa 	beq	1e38 <__aeabi_dmul+0x1b8>
    1e4c:	e1811006 	orr	r1, r1, r6
    1e50:	e3350000 	teq	r5, #0
    1e54:	112fff1e 	bxne	lr
    1e58:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    1e5c:	e1b02082 	lsls	r2, r2, #1
    1e60:	e0a33003 	adc	r3, r3, r3
    1e64:	e3130601 	tst	r3, #1048576	; 0x100000
    1e68:	02455001 	subeq	r5, r5, #1
    1e6c:	0afffffa 	beq	1e5c <__aeabi_dmul+0x1dc>
    1e70:	e1833006 	orr	r3, r3, r6
    1e74:	e12fff1e 	bx	lr
    1e78:	e134000c 	teq	r4, r12
    1e7c:	e00c5a23 	and	r5, r12, r3, lsr #20
    1e80:	1135000c 	teqne	r5, r12
    1e84:	0a000007 	beq	1ea8 <__aeabi_dmul+0x228>
    1e88:	e1906081 	orrs	r6, r0, r1, lsl #1
    1e8c:	11926083 	orrsne	r6, r2, r3, lsl #1
    1e90:	1affffe5 	bne	1e2c <__aeabi_dmul+0x1ac>
    1e94:	e0211003 	eor	r1, r1, r3
    1e98:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1e9c:	e3a00000 	mov	r0, #0
    1ea0:	e8bd4070 	pop	{r4, r5, r6, lr}
    1ea4:	e12fff1e 	bx	lr
    1ea8:	e1906081 	orrs	r6, r0, r1, lsl #1
    1eac:	01a00002 	moveq	r0, r2
    1eb0:	01a01003 	moveq	r1, r3
    1eb4:	11926083 	orrsne	r6, r2, r3, lsl #1
    1eb8:	0a000010 	beq	1f00 <__aeabi_dmul+0x280>
    1ebc:	e134000c 	teq	r4, r12
    1ec0:	1a000001 	bne	1ecc <__aeabi_dmul+0x24c>
    1ec4:	e1906601 	orrs	r6, r0, r1, lsl #12
    1ec8:	1a00000c 	bne	1f00 <__aeabi_dmul+0x280>
    1ecc:	e135000c 	teq	r5, r12
    1ed0:	1a000003 	bne	1ee4 <__aeabi_dmul+0x264>
    1ed4:	e1926603 	orrs	r6, r2, r3, lsl #12
    1ed8:	11a00002 	movne	r0, r2
    1edc:	11a01003 	movne	r1, r3
    1ee0:	1a000006 	bne	1f00 <__aeabi_dmul+0x280>
    1ee4:	e0211003 	eor	r1, r1, r3
    1ee8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1eec:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1ef0:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1ef4:	e3a00000 	mov	r0, #0
    1ef8:	e8bd4070 	pop	{r4, r5, r6, lr}
    1efc:	e12fff1e 	bx	lr
    1f00:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1f04:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    1f08:	e8bd4070 	pop	{r4, r5, r6, lr}
    1f0c:	e12fff1e 	bx	lr

00001f10 <__aeabi_ddiv>:
    1f10:	e92d4070 	push	{r4, r5, r6, lr}
    1f14:	e3a0c0ff 	mov	r12, #255	; 0xff
    1f18:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1f1c:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1f20:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1f24:	1134000c 	teqne	r4, r12
    1f28:	1135000c 	teqne	r5, r12
    1f2c:	0b00005e 	bleq	20ac <__aeabi_ddiv+0x19c>
    1f30:	e0444005 	sub	r4, r4, r5
    1f34:	e021e003 	eor	lr, r1, r3
    1f38:	e1925603 	orrs	r5, r2, r3, lsl #12
    1f3c:	e1a01601 	lsl	r1, r1, #12
    1f40:	0a00004c 	beq	2078 <__aeabi_ddiv+0x168>
    1f44:	e1a03603 	lsl	r3, r3, #12
    1f48:	e3a05201 	mov	r5, #268435456	; 0x10000000
    1f4c:	e1853223 	orr	r3, r5, r3, lsr #4
    1f50:	e1833c22 	orr	r3, r3, r2, lsr #24
    1f54:	e1a02402 	lsl	r2, r2, #8
    1f58:	e1855221 	orr	r5, r5, r1, lsr #4
    1f5c:	e1855c20 	orr	r5, r5, r0, lsr #24
    1f60:	e1a06400 	lsl	r6, r0, #8
    1f64:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    1f68:	e1550003 	cmp	r5, r3
    1f6c:	01560002 	cmpeq	r6, r2
    1f70:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    1f74:	e2844c03 	add	r4, r4, #768	; 0x300
    1f78:	2a000001 	bcs	1f84 <__aeabi_ddiv+0x74>
    1f7c:	e1b030a3 	lsrs	r3, r3, #1
    1f80:	e1a02062 	rrx	r2, r2
    1f84:	e0566002 	subs	r6, r6, r2
    1f88:	e0c55003 	sbc	r5, r5, r3
    1f8c:	e1b030a3 	lsrs	r3, r3, #1
    1f90:	e1a02062 	rrx	r2, r2
    1f94:	e3a00601 	mov	r0, #1048576	; 0x100000
    1f98:	e3a0c702 	mov	r12, #524288	; 0x80000
    1f9c:	e056e002 	subs	lr, r6, r2
    1fa0:	e0d5e003 	sbcs	lr, r5, r3
    1fa4:	20466002 	subcs	r6, r6, r2
    1fa8:	21a0500e 	movcs	r5, lr
    1fac:	2180000c 	orrcs	r0, r0, r12
    1fb0:	e1b030a3 	lsrs	r3, r3, #1
    1fb4:	e1a02062 	rrx	r2, r2
    1fb8:	e056e002 	subs	lr, r6, r2
    1fbc:	e0d5e003 	sbcs	lr, r5, r3
    1fc0:	20466002 	subcs	r6, r6, r2
    1fc4:	21a0500e 	movcs	r5, lr
    1fc8:	218000ac 	orrcs	r0, r0, r12, lsr #1
    1fcc:	e1b030a3 	lsrs	r3, r3, #1
    1fd0:	e1a02062 	rrx	r2, r2
    1fd4:	e056e002 	subs	lr, r6, r2
    1fd8:	e0d5e003 	sbcs	lr, r5, r3
    1fdc:	20466002 	subcs	r6, r6, r2
    1fe0:	21a0500e 	movcs	r5, lr
    1fe4:	2180012c 	orrcs	r0, r0, r12, lsr #2
    1fe8:	e1b030a3 	lsrs	r3, r3, #1
    1fec:	e1a02062 	rrx	r2, r2
    1ff0:	e056e002 	subs	lr, r6, r2
    1ff4:	e0d5e003 	sbcs	lr, r5, r3
    1ff8:	20466002 	subcs	r6, r6, r2
    1ffc:	21a0500e 	movcs	r5, lr
    2000:	218001ac 	orrcs	r0, r0, r12, lsr #3
    2004:	e195e006 	orrs	lr, r5, r6
    2008:	0a00000d 	beq	2044 <__aeabi_ddiv+0x134>
    200c:	e1a05205 	lsl	r5, r5, #4
    2010:	e1855e26 	orr	r5, r5, r6, lsr #28
    2014:	e1a06206 	lsl	r6, r6, #4
    2018:	e1a03183 	lsl	r3, r3, #3
    201c:	e1833ea2 	orr	r3, r3, r2, lsr #29
    2020:	e1a02182 	lsl	r2, r2, #3
    2024:	e1b0c22c 	lsrs	r12, r12, #4
    2028:	1affffdb 	bne	1f9c <__aeabi_ddiv+0x8c>
    202c:	e3110601 	tst	r1, #1048576	; 0x100000
    2030:	1a000006 	bne	2050 <__aeabi_ddiv+0x140>
    2034:	e1811000 	orr	r1, r1, r0
    2038:	e3a00000 	mov	r0, #0
    203c:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    2040:	eaffffd5 	b	1f9c <__aeabi_ddiv+0x8c>
    2044:	e3110601 	tst	r1, #1048576	; 0x100000
    2048:	01811000 	orreq	r1, r1, r0
    204c:	03a00000 	moveq	r0, #0
    2050:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    2054:	835c0c07 	cmphi	r12, #1792	; 0x700
    2058:	8affff43 	bhi	1d6c <__aeabi_dmul+0xec>
    205c:	e055c003 	subs	r12, r5, r3
    2060:	0056c002 	subseq	r12, r6, r2
    2064:	01b0c0a0 	lsrseq	r12, r0, #1
    2068:	e2b00000 	adcs	r0, r0, #0
    206c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    2070:	e8bd4070 	pop	{r4, r5, r6, lr}
    2074:	e12fff1e 	bx	lr
    2078:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    207c:	e18e1621 	orr	r1, lr, r1, lsr #12
    2080:	e09440ac 	adds	r4, r4, r12, lsr #1
    2084:	c074500c 	rsbsgt	r5, r4, r12
    2088:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    208c:	c8bd4070 	popgt	{r4, r5, r6, lr}
    2090:	c12fff1e 	bxgt	lr
    2094:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2098:	e3a0e000 	mov	lr, #0
    209c:	e2544001 	subs	r4, r4, #1
    20a0:	eaffff31 	b	1d6c <__aeabi_dmul+0xec>
    20a4:	e185e006 	orr	lr, r5, r6
    20a8:	eaffff2f 	b	1d6c <__aeabi_dmul+0xec>
    20ac:	e00c5a23 	and	r5, r12, r3, lsr #20
    20b0:	e134000c 	teq	r4, r12
    20b4:	0135000c 	teqeq	r5, r12
    20b8:	0affff90 	beq	1f00 <__aeabi_dmul+0x280>
    20bc:	e134000c 	teq	r4, r12
    20c0:	1a000006 	bne	20e0 <__aeabi_ddiv+0x1d0>
    20c4:	e1904601 	orrs	r4, r0, r1, lsl #12
    20c8:	1affff8c 	bne	1f00 <__aeabi_dmul+0x280>
    20cc:	e135000c 	teq	r5, r12
    20d0:	1affff83 	bne	1ee4 <__aeabi_dmul+0x264>
    20d4:	e1a00002 	mov	r0, r2
    20d8:	e1a01003 	mov	r1, r3
    20dc:	eaffff87 	b	1f00 <__aeabi_dmul+0x280>
    20e0:	e135000c 	teq	r5, r12
    20e4:	1a000004 	bne	20fc <__aeabi_ddiv+0x1ec>
    20e8:	e1925603 	orrs	r5, r2, r3, lsl #12
    20ec:	0affff68 	beq	1e94 <__aeabi_dmul+0x214>
    20f0:	e1a00002 	mov	r0, r2
    20f4:	e1a01003 	mov	r1, r3
    20f8:	eaffff80 	b	1f00 <__aeabi_dmul+0x280>
    20fc:	e1906081 	orrs	r6, r0, r1, lsl #1
    2100:	11926083 	orrsne	r6, r2, r3, lsl #1
    2104:	1affff48 	bne	1e2c <__aeabi_dmul+0x1ac>
    2108:	e1904081 	orrs	r4, r0, r1, lsl #1
    210c:	1affff74 	bne	1ee4 <__aeabi_dmul+0x264>
    2110:	e1925083 	orrs	r5, r2, r3, lsl #1
    2114:	1affff5e 	bne	1e94 <__aeabi_dmul+0x214>
    2118:	eaffff78 	b	1f00 <__aeabi_dmul+0x280>

0000211c <__gedf2>:
    211c:	e3e0c000 	mvn	r12, #0
    2120:	ea000002 	b	2130 <__cmpdf2+0x4>

00002124 <__ledf2>:
    2124:	e3a0c001 	mov	r12, #1
    2128:	ea000000 	b	2130 <__cmpdf2+0x4>

0000212c <__cmpdf2>:
    212c:	e3a0c001 	mov	r12, #1
    2130:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    2134:	e1a0c081 	lsl	r12, r1, #1
    2138:	e1f0cacc 	mvns	r12, r12, asr #21
    213c:	e1a0c083 	lsl	r12, r3, #1
    2140:	11f0cacc 	mvnsne	r12, r12, asr #21
    2144:	0a00000e 	beq	2184 <__cmpdf2+0x58>
    2148:	e28dd004 	add	sp, sp, #4
    214c:	e190c081 	orrs	r12, r0, r1, lsl #1
    2150:	0192c083 	orrseq	r12, r2, r3, lsl #1
    2154:	11310003 	teqne	r1, r3
    2158:	01300002 	teqeq	r0, r2
    215c:	03a00000 	moveq	r0, #0
    2160:	012fff1e 	bxeq	lr
    2164:	e3700000 	cmn	r0, #0
    2168:	e1310003 	teq	r1, r3
    216c:	51510003 	cmppl	r1, r3
    2170:	01500002 	cmpeq	r0, r2
    2174:	21a00fc3 	asrcs	r0, r3, #31
    2178:	31e00fc3 	mvncc	r0, r3, asr #31
    217c:	e3800001 	orr	r0, r0, #1
    2180:	e12fff1e 	bx	lr
    2184:	e1a0c081 	lsl	r12, r1, #1
    2188:	e1f0cacc 	mvns	r12, r12, asr #21
    218c:	1a000001 	bne	2198 <__cmpdf2+0x6c>
    2190:	e190c601 	orrs	r12, r0, r1, lsl #12
    2194:	1a000004 	bne	21ac <__cmpdf2+0x80>
    2198:	e1a0c083 	lsl	r12, r3, #1
    219c:	e1f0cacc 	mvns	r12, r12, asr #21
    21a0:	1affffe8 	bne	2148 <__cmpdf2+0x1c>
    21a4:	e192c603 	orrs	r12, r2, r3, lsl #12
    21a8:	0affffe6 	beq	2148 <__cmpdf2+0x1c>
    21ac:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    21b0:	e12fff1e 	bx	lr

000021b4 <__aeabi_cdrcmple>:
    21b4:	e1a0c000 	mov	r12, r0
    21b8:	e1a00002 	mov	r0, r2
    21bc:	e1a0200c 	mov	r2, r12
    21c0:	e1a0c001 	mov	r12, r1
    21c4:	e1a01003 	mov	r1, r3
    21c8:	e1a0300c 	mov	r3, r12
    21cc:	eaffffff 	b	21d0 <__aeabi_cdcmpeq>

000021d0 <__aeabi_cdcmpeq>:
    21d0:	e92d4001 	push	{r0, lr}
    21d4:	ebffffd4 	bl	212c <__cmpdf2>
    21d8:	e3500000 	cmp	r0, #0
    21dc:	43700000 	cmnmi	r0, #0
    21e0:	e8bd4001 	pop	{r0, lr}
    21e4:	e12fff1e 	bx	lr

000021e8 <__aeabi_dcmpeq>:
    21e8:	e52de008 	str	lr, [sp, #-8]!
    21ec:	ebfffff7 	bl	21d0 <__aeabi_cdcmpeq>
    21f0:	03a00001 	moveq	r0, #1
    21f4:	13a00000 	movne	r0, #0
    21f8:	e49de008 	ldr	lr, [sp], #8
    21fc:	e12fff1e 	bx	lr

00002200 <__aeabi_dcmplt>:
    2200:	e52de008 	str	lr, [sp, #-8]!
    2204:	ebfffff1 	bl	21d0 <__aeabi_cdcmpeq>
    2208:	33a00001 	movcc	r0, #1
    220c:	23a00000 	movcs	r0, #0
    2210:	e49de008 	ldr	lr, [sp], #8
    2214:	e12fff1e 	bx	lr

00002218 <__aeabi_dcmple>:
    2218:	e52de008 	str	lr, [sp, #-8]!
    221c:	ebffffeb 	bl	21d0 <__aeabi_cdcmpeq>
    2220:	93a00001 	movls	r0, #1
    2224:	83a00000 	movhi	r0, #0
    2228:	e49de008 	ldr	lr, [sp], #8
    222c:	e12fff1e 	bx	lr

00002230 <__aeabi_dcmpge>:
    2230:	e52de008 	str	lr, [sp, #-8]!
    2234:	ebffffde 	bl	21b4 <__aeabi_cdrcmple>
    2238:	93a00001 	movls	r0, #1
    223c:	83a00000 	movhi	r0, #0
    2240:	e49de008 	ldr	lr, [sp], #8
    2244:	e12fff1e 	bx	lr

00002248 <__aeabi_dcmpgt>:
    2248:	e52de008 	str	lr, [sp, #-8]!
    224c:	ebffffd8 	bl	21b4 <__aeabi_cdrcmple>
    2250:	33a00001 	movcc	r0, #1
    2254:	23a00000 	movcs	r0, #0
    2258:	e49de008 	ldr	lr, [sp], #8
    225c:	e12fff1e 	bx	lr

00002260 <__aeabi_d2iz>:
    2260:	e1a02081 	lsl	r2, r1, #1
    2264:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    2268:	2a00000c 	bcs	22a0 <__aeabi_d2iz+0x40>
    226c:	5a000009 	bpl	2298 <__aeabi_d2iz+0x38>
    2270:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    2274:	e0532ac2 	subs	r2, r3, r2, asr #21
    2278:	9a00000a 	bls	22a8 <__aeabi_d2iz+0x48>
    227c:	e1a03581 	lsl	r3, r1, #11
    2280:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    2284:	e1833aa0 	orr	r3, r3, r0, lsr #21
    2288:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    228c:	e1a00233 	lsr	r0, r3, r2
    2290:	12600000 	rsbne	r0, r0, #0
    2294:	e12fff1e 	bx	lr
    2298:	e3a00000 	mov	r0, #0
    229c:	e12fff1e 	bx	lr
    22a0:	e1900601 	orrs	r0, r0, r1, lsl #12
    22a4:	1a000002 	bne	22b4 <__aeabi_d2iz+0x54>
    22a8:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    22ac:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    22b0:	e12fff1e 	bx	lr
    22b4:	e3a00000 	mov	r0, #0
    22b8:	e12fff1e 	bx	lr

000022bc <atexit>:
    22bc:	e1a01000 	mov	r1, r0
    22c0:	e3a00000 	mov	r0, #0
    22c4:	e92d4008 	push	{r3, lr}
    22c8:	e1a02000 	mov	r2, r0
    22cc:	e1a03000 	mov	r3, r0
    22d0:	eb0000de 	bl	2650 <__register_exitproc>
    22d4:	e8bd4008 	pop	{r3, lr}
    22d8:	e12fff1e 	bx	lr

000022dc <exit>:
    22dc:	e92d4008 	push	{r3, lr}
    22e0:	e3a01000 	mov	r1, #0
    22e4:	e1a04000 	mov	r4, r0
    22e8:	eb000115 	bl	2744 <__call_exitprocs>
    22ec:	e59f3018 	ldr	r3, [pc, #24]	; 230c <exit+0x30>
    22f0:	e5930000 	ldr	r0, [r3]
    22f4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    22f8:	e3530000 	cmp	r3, #0
    22fc:	11a0e00f 	movne	lr, pc
    2300:	112fff13 	bxne	r3
    2304:	e1a00004 	mov	r0, r4
    2308:	eb000199 	bl	2974 <_exit>
    230c:	00002a70 	.word	0x00002a70

00002310 <memcpy>:
    2310:	e3520003 	cmp	r2, #3
    2314:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    2318:	8a000009 	bhi	2344 <memcpy+0x34>
    231c:	e3520000 	cmp	r2, #0
    2320:	0a000005 	beq	233c <memcpy+0x2c>
    2324:	e3a03000 	mov	r3, #0
    2328:	e7d1c003 	ldrb	r12, [r1, r3]
    232c:	e7c0c003 	strb	r12, [r0, r3]
    2330:	e2833001 	add	r3, r3, #1
    2334:	e1530002 	cmp	r3, r2
    2338:	1afffffa 	bne	2328 <memcpy+0x18>
    233c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    2340:	e12fff1e 	bx	lr
    2344:	e3100003 	tst	r0, #3
    2348:	e0802002 	add	r2, r0, r2
    234c:	0a00000b 	beq	2380 <memcpy+0x70>
    2350:	e280c001 	add	r12, r0, #1
    2354:	e2814001 	add	r4, r1, #1
    2358:	e20c3003 	and	r3, r12, #3
    235c:	e5545001 	ldrb	r5, [r4, #-1]
    2360:	e3530000 	cmp	r3, #0
    2364:	e1a01004 	mov	r1, r4
    2368:	e1a0300c 	mov	r3, r12
    236c:	e54c5001 	strb	r5, [r12, #-1]
    2370:	e2844001 	add	r4, r4, #1
    2374:	e28cc001 	add	r12, r12, #1
    2378:	1afffff6 	bne	2358 <memcpy+0x48>
    237c:	ea000000 	b	2384 <memcpy+0x74>
    2380:	e1a03000 	mov	r3, r0
    2384:	e211c003 	ands	r12, r1, #3
    2388:	1a00004f 	bne	24cc <memcpy+0x1bc>
    238c:	e063c002 	rsb	r12, r3, r2
    2390:	e35c003f 	cmp	r12, #63	; 0x3f
    2394:	da000024 	ble	242c <memcpy+0x11c>
    2398:	e591c000 	ldr	r12, [r1]
    239c:	e583c000 	str	r12, [r3]
    23a0:	e591c004 	ldr	r12, [r1, #4]
    23a4:	e583c004 	str	r12, [r3, #4]
    23a8:	e591c008 	ldr	r12, [r1, #8]
    23ac:	e583c008 	str	r12, [r3, #8]
    23b0:	e591c00c 	ldr	r12, [r1, #12]
    23b4:	e583c00c 	str	r12, [r3, #12]
    23b8:	e591c010 	ldr	r12, [r1, #16]
    23bc:	e583c010 	str	r12, [r3, #16]
    23c0:	e591c014 	ldr	r12, [r1, #20]
    23c4:	e583c014 	str	r12, [r3, #20]
    23c8:	e591c018 	ldr	r12, [r1, #24]
    23cc:	e583c018 	str	r12, [r3, #24]
    23d0:	e591c01c 	ldr	r12, [r1, #28]
    23d4:	e583c01c 	str	r12, [r3, #28]
    23d8:	e591c020 	ldr	r12, [r1, #32]
    23dc:	e583c020 	str	r12, [r3, #32]
    23e0:	e591c024 	ldr	r12, [r1, #36]	; 0x24
    23e4:	e583c024 	str	r12, [r3, #36]	; 0x24
    23e8:	e591c028 	ldr	r12, [r1, #40]	; 0x28
    23ec:	e583c028 	str	r12, [r3, #40]	; 0x28
    23f0:	e591c02c 	ldr	r12, [r1, #44]	; 0x2c
    23f4:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    23f8:	e591c030 	ldr	r12, [r1, #48]	; 0x30
    23fc:	e583c030 	str	r12, [r3, #48]	; 0x30
    2400:	e591c034 	ldr	r12, [r1, #52]	; 0x34
    2404:	e583c034 	str	r12, [r3, #52]	; 0x34
    2408:	e591c038 	ldr	r12, [r1, #56]	; 0x38
    240c:	e583c038 	str	r12, [r3, #56]	; 0x38
    2410:	e591c03c 	ldr	r12, [r1, #60]	; 0x3c
    2414:	e2833040 	add	r3, r3, #64	; 0x40
    2418:	e503c004 	str	r12, [r3, #-4]
    241c:	e063c002 	rsb	r12, r3, r2
    2420:	e35c003f 	cmp	r12, #63	; 0x3f
    2424:	e2811040 	add	r1, r1, #64	; 0x40
    2428:	caffffda 	bgt	2398 <memcpy+0x88>
    242c:	e35c000f 	cmp	r12, #15
    2430:	da00000c 	ble	2468 <memcpy+0x158>
    2434:	e591c000 	ldr	r12, [r1]
    2438:	e583c000 	str	r12, [r3]
    243c:	e591c004 	ldr	r12, [r1, #4]
    2440:	e583c004 	str	r12, [r3, #4]
    2444:	e591c008 	ldr	r12, [r1, #8]
    2448:	e583c008 	str	r12, [r3, #8]
    244c:	e591c00c 	ldr	r12, [r1, #12]
    2450:	e2833010 	add	r3, r3, #16
    2454:	e503c004 	str	r12, [r3, #-4]
    2458:	e063c002 	rsb	r12, r3, r2
    245c:	e35c000f 	cmp	r12, #15
    2460:	e2811010 	add	r1, r1, #16
    2464:	cafffff2 	bgt	2434 <memcpy+0x124>
    2468:	e35c0003 	cmp	r12, #3
    246c:	da00000a 	ble	249c <memcpy+0x18c>
    2470:	e283c004 	add	r12, r3, #4
    2474:	e2814004 	add	r4, r1, #4
    2478:	e06c3002 	rsb	r3, r12, r2
    247c:	e5145004 	ldr	r5, [r4, #-4]
    2480:	e3530003 	cmp	r3, #3
    2484:	e1a01004 	mov	r1, r4
    2488:	e1a0300c 	mov	r3, r12
    248c:	e50c5004 	str	r5, [r12, #-4]
    2490:	e2844004 	add	r4, r4, #4
    2494:	e28cc004 	add	r12, r12, #4
    2498:	cafffff6 	bgt	2478 <memcpy+0x168>
    249c:	e1520003 	cmp	r2, r3
    24a0:	82833001 	addhi	r3, r3, #1
    24a4:	82811001 	addhi	r1, r1, #1
    24a8:	82822001 	addhi	r2, r2, #1
    24ac:	9affffa2 	bls	233c <memcpy+0x2c>
    24b0:	e551c001 	ldrb	r12, [r1, #-1]
    24b4:	e2833001 	add	r3, r3, #1
    24b8:	e1530002 	cmp	r3, r2
    24bc:	e543c002 	strb	r12, [r3, #-2]
    24c0:	e2811001 	add	r1, r1, #1
    24c4:	1afffff9 	bne	24b0 <memcpy+0x1a0>
    24c8:	eaffff9b 	b	233c <memcpy+0x2c>
    24cc:	e0635002 	rsb	r5, r3, r2
    24d0:	e06c4001 	rsb	r4, r12, r1
    24d4:	e3550003 	cmp	r5, #3
    24d8:	e5945000 	ldr	r5, [r4]
    24dc:	daffffee 	ble	249c <memcpy+0x18c>
    24e0:	e26c6004 	rsb	r6, r12, #4
    24e4:	e1a0718c 	lsl	r7, r12, #3
    24e8:	e1a06186 	lsl	r6, r6, #3
    24ec:	e283c004 	add	r12, r3, #4
    24f0:	e1a08735 	lsr	r8, r5, r7
    24f4:	e5b45004 	ldr	r5, [r4, #4]!
    24f8:	e1888615 	orr	r8, r8, r5, lsl r6
    24fc:	e06c3002 	rsb	r3, r12, r2
    2500:	e3530003 	cmp	r3, #3
    2504:	e50c8004 	str	r8, [r12, #-4]
    2508:	e1a0300c 	mov	r3, r12
    250c:	e2811004 	add	r1, r1, #4
    2510:	e28cc004 	add	r12, r12, #4
    2514:	cafffff5 	bgt	24f0 <memcpy+0x1e0>
    2518:	eaffffdf 	b	249c <memcpy+0x18c>

0000251c <memset>:
    251c:	e3520003 	cmp	r2, #3
    2520:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    2524:	e20110ff 	and	r1, r1, #255	; 0xff
    2528:	8a000008 	bhi	2550 <memset+0x34>
    252c:	e3520000 	cmp	r2, #0
    2530:	0a000004 	beq	2548 <memset+0x2c>
    2534:	e1a03000 	mov	r3, r0
    2538:	e0822000 	add	r2, r2, r0
    253c:	e4c31001 	strb	r1, [r3], #1
    2540:	e1530002 	cmp	r3, r2
    2544:	1afffffc 	bne	253c <memset+0x20>
    2548:	e8bd0010 	ldmfd	sp!, {r4}
    254c:	e12fff1e 	bx	lr
    2550:	e3100003 	tst	r0, #3
    2554:	e0802002 	add	r2, r0, r2
    2558:	0a000007 	beq	257c <memset+0x60>
    255c:	e280c001 	add	r12, r0, #1
    2560:	e20c3003 	and	r3, r12, #3
    2564:	e3530000 	cmp	r3, #0
    2568:	e54c1001 	strb	r1, [r12, #-1]
    256c:	e1a0300c 	mov	r3, r12
    2570:	e28cc001 	add	r12, r12, #1
    2574:	1afffff9 	bne	2560 <memset+0x44>
    2578:	ea000000 	b	2580 <memset+0x64>
    257c:	e1a03000 	mov	r3, r0
    2580:	e0634002 	rsb	r4, r3, r2
    2584:	e081c401 	add	r12, r1, r1, lsl #8
    2588:	e354003f 	cmp	r4, #63	; 0x3f
    258c:	e08cc80c 	add	r12, r12, r12, lsl #16
    2590:	da00001a 	ble	2600 <memset+0xe4>
    2594:	e583c000 	str	r12, [r3]
    2598:	e583c004 	str	r12, [r3, #4]
    259c:	e583c008 	str	r12, [r3, #8]
    25a0:	e583c00c 	str	r12, [r3, #12]
    25a4:	e583c010 	str	r12, [r3, #16]
    25a8:	e583c014 	str	r12, [r3, #20]
    25ac:	e583c018 	str	r12, [r3, #24]
    25b0:	e583c01c 	str	r12, [r3, #28]
    25b4:	e583c020 	str	r12, [r3, #32]
    25b8:	e583c024 	str	r12, [r3, #36]	; 0x24
    25bc:	e583c028 	str	r12, [r3, #40]	; 0x28
    25c0:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    25c4:	e583c030 	str	r12, [r3, #48]	; 0x30
    25c8:	e583c034 	str	r12, [r3, #52]	; 0x34
    25cc:	e583c038 	str	r12, [r3, #56]	; 0x38
    25d0:	e583c03c 	str	r12, [r3, #60]	; 0x3c
    25d4:	e2833040 	add	r3, r3, #64	; 0x40
    25d8:	e0634002 	rsb	r4, r3, r2
    25dc:	e354003f 	cmp	r4, #63	; 0x3f
    25e0:	caffffeb 	bgt	2594 <memset+0x78>
    25e4:	ea000005 	b	2600 <memset+0xe4>
    25e8:	e583c000 	str	r12, [r3]
    25ec:	e583c004 	str	r12, [r3, #4]
    25f0:	e583c008 	str	r12, [r3, #8]
    25f4:	e583c00c 	str	r12, [r3, #12]
    25f8:	e2833010 	add	r3, r3, #16
    25fc:	e0634002 	rsb	r4, r3, r2
    2600:	e354000f 	cmp	r4, #15
    2604:	cafffff7 	bgt	25e8 <memset+0xcc>
    2608:	e3540003 	cmp	r4, #3
    260c:	da000006 	ble	262c <memset+0x110>
    2610:	e2834004 	add	r4, r3, #4
    2614:	e0643002 	rsb	r3, r4, r2
    2618:	e3530003 	cmp	r3, #3
    261c:	e504c004 	str	r12, [r4, #-4]
    2620:	e1a03004 	mov	r3, r4
    2624:	e2844004 	add	r4, r4, #4
    2628:	cafffff9 	bgt	2614 <memset+0xf8>
    262c:	e1520003 	cmp	r2, r3
    2630:	9affffc4 	bls	2548 <memset+0x2c>
    2634:	e2833001 	add	r3, r3, #1
    2638:	e2822001 	add	r2, r2, #1
    263c:	e5431001 	strb	r1, [r3, #-1]
    2640:	e2833001 	add	r3, r3, #1
    2644:	e1530002 	cmp	r3, r2
    2648:	1afffffb 	bne	263c <memset+0x120>
    264c:	eaffffbd 	b	2548 <memset+0x2c>

00002650 <__register_exitproc>:
    2650:	e59fc0e4 	ldr	r12, [pc, #228]	; 273c <__register_exitproc+0xec>
    2654:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    2658:	e59c4000 	ldr	r4, [r12]
    265c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    2660:	e35c0000 	cmp	r12, #0
    2664:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    2668:	e59c5004 	ldr	r5, [r12, #4]
    266c:	0584c148 	streq	r12, [r4, #328]	; 0x148
    2670:	e355001f 	cmp	r5, #31
    2674:	e24dd010 	sub	sp, sp, #16
    2678:	e1a06000 	mov	r6, r0
    267c:	da000015 	ble	26d8 <__register_exitproc+0x88>
    2680:	e59f00b8 	ldr	r0, [pc, #184]	; 2740 <__register_exitproc+0xf0>
    2684:	e3500000 	cmp	r0, #0
    2688:	1a000001 	bne	2694 <__register_exitproc+0x44>
    268c:	e3e00000 	mvn	r0, #0
    2690:	ea000018 	b	26f8 <__register_exitproc+0xa8>
    2694:	e3a00e19 	mov	r0, #400	; 0x190
    2698:	e58d100c 	str	r1, [sp, #12]
    269c:	e58d2008 	str	r2, [sp, #8]
    26a0:	e58d3004 	str	r3, [sp, #4]
    26a4:	e320f000 	nop	{0}
    26a8:	e250c000 	subs	r12, r0, #0
    26ac:	e59d100c 	ldr	r1, [sp, #12]
    26b0:	e59d2008 	ldr	r2, [sp, #8]
    26b4:	e59d3004 	ldr	r3, [sp, #4]
    26b8:	0afffff3 	beq	268c <__register_exitproc+0x3c>
    26bc:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    26c0:	e3a00000 	mov	r0, #0
    26c4:	e58c0004 	str	r0, [r12, #4]
    26c8:	e58c5000 	str	r5, [r12]
    26cc:	e584c148 	str	r12, [r4, #328]	; 0x148
    26d0:	e58c0188 	str	r0, [r12, #392]	; 0x188
    26d4:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    26d8:	e3560000 	cmp	r6, #0
    26dc:	e59c4004 	ldr	r4, [r12, #4]
    26e0:	1a000007 	bne	2704 <__register_exitproc+0xb4>
    26e4:	e2843002 	add	r3, r4, #2
    26e8:	e2844001 	add	r4, r4, #1
    26ec:	e78c1103 	str	r1, [r12, r3, lsl #2]
    26f0:	e58c4004 	str	r4, [r12, #4]
    26f4:	e3a00000 	mov	r0, #0
    26f8:	e28dd010 	add	sp, sp, #16
    26fc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    2700:	e12fff1e 	bx	lr
    2704:	e3a00001 	mov	r0, #1
    2708:	e1a00410 	lsl	r0, r0, r4
    270c:	e08c8104 	add	r8, r12, r4, lsl #2
    2710:	e3560002 	cmp	r6, #2
    2714:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    2718:	e5883108 	str	r3, [r8, #264]	; 0x108
    271c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    2720:	e1877000 	orr	r7, r7, r0
    2724:	01830000 	orreq	r0, r3, r0
    2728:	e1a05008 	mov	r5, r8
    272c:	e5882088 	str	r2, [r8, #136]	; 0x88
    2730:	e58c7188 	str	r7, [r12, #392]	; 0x188
    2734:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    2738:	eaffffe9 	b	26e4 <__register_exitproc+0x94>
    273c:	00002a70 	.word	0x00002a70
    2740:	00000000 	.word	0x00000000

00002744 <__call_exitprocs>:
    2744:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2748:	e59f3168 	ldr	r3, [pc, #360]	; 28b8 <__call_exitprocs+0x174>
    274c:	e5933000 	ldr	r3, [r3]
    2750:	e24dd014 	sub	sp, sp, #20
    2754:	e58d3004 	str	r3, [sp, #4]
    2758:	e2833f52 	add	r3, r3, #328	; 0x148
    275c:	e58d0008 	str	r0, [sp, #8]
    2760:	e58d300c 	str	r3, [sp, #12]
    2764:	e1a07001 	mov	r7, r1
    2768:	e3a08001 	mov	r8, #1
    276c:	e59d3004 	ldr	r3, [sp, #4]
    2770:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    2774:	e3560000 	cmp	r6, #0
    2778:	e59db00c 	ldr	r11, [sp, #12]
    277c:	0a000033 	beq	2850 <__call_exitprocs+0x10c>
    2780:	e5965004 	ldr	r5, [r6, #4]
    2784:	e2554001 	subs	r4, r5, #1
    2788:	5286a088 	addpl	r10, r6, #136	; 0x88
    278c:	5285501f 	addpl	r5, r5, #31
    2790:	508a5105 	addpl	r5, r10, r5, lsl #2
    2794:	5a000007 	bpl	27b8 <__call_exitprocs+0x74>
    2798:	ea000029 	b	2844 <__call_exitprocs+0x100>
    279c:	e5953000 	ldr	r3, [r5]
    27a0:	e1530007 	cmp	r3, r7
    27a4:	0a000005 	beq	27c0 <__call_exitprocs+0x7c>
    27a8:	e2444001 	sub	r4, r4, #1
    27ac:	e3740001 	cmn	r4, #1
    27b0:	e2455004 	sub	r5, r5, #4
    27b4:	0a000022 	beq	2844 <__call_exitprocs+0x100>
    27b8:	e3570000 	cmp	r7, #0
    27bc:	1afffff6 	bne	279c <__call_exitprocs+0x58>
    27c0:	e5963004 	ldr	r3, [r6, #4]
    27c4:	e06a2005 	rsb	r2, r10, r5
    27c8:	e2433001 	sub	r3, r3, #1
    27cc:	e0862002 	add	r2, r6, r2
    27d0:	e1530004 	cmp	r3, r4
    27d4:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    27d8:	13a01000 	movne	r1, #0
    27dc:	05864004 	streq	r4, [r6, #4]
    27e0:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    27e4:	e3530000 	cmp	r3, #0
    27e8:	0affffee 	beq	27a8 <__call_exitprocs+0x64>
    27ec:	e1a02418 	lsl	r2, r8, r4
    27f0:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    27f4:	e1120001 	tst	r2, r1
    27f8:	e5969004 	ldr	r9, [r6, #4]
    27fc:	0a000016 	beq	285c <__call_exitprocs+0x118>
    2800:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    2804:	e1120001 	tst	r2, r1
    2808:	1a000016 	bne	2868 <__call_exitprocs+0x124>
    280c:	e59d0008 	ldr	r0, [sp, #8]
    2810:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    2814:	e1a0e00f 	mov	lr, pc
    2818:	e12fff13 	bx	r3
    281c:	e5963004 	ldr	r3, [r6, #4]
    2820:	e1530009 	cmp	r3, r9
    2824:	1affffd0 	bne	276c <__call_exitprocs+0x28>
    2828:	e59b3000 	ldr	r3, [r11]
    282c:	e1530006 	cmp	r3, r6
    2830:	1affffcd 	bne	276c <__call_exitprocs+0x28>
    2834:	e2444001 	sub	r4, r4, #1
    2838:	e3740001 	cmn	r4, #1
    283c:	e2455004 	sub	r5, r5, #4
    2840:	1affffdc 	bne	27b8 <__call_exitprocs+0x74>
    2844:	e59f1070 	ldr	r1, [pc, #112]	; 28bc <__call_exitprocs+0x178>
    2848:	e3510000 	cmp	r1, #0
    284c:	1a000009 	bne	2878 <__call_exitprocs+0x134>
    2850:	e28dd014 	add	sp, sp, #20
    2854:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2858:	e12fff1e 	bx	lr
    285c:	e1a0e00f 	mov	lr, pc
    2860:	e12fff13 	bx	r3
    2864:	eaffffec 	b	281c <__call_exitprocs+0xd8>
    2868:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    286c:	e1a0e00f 	mov	lr, pc
    2870:	e12fff13 	bx	r3
    2874:	eaffffe8 	b	281c <__call_exitprocs+0xd8>
    2878:	e5963004 	ldr	r3, [r6, #4]
    287c:	e3530000 	cmp	r3, #0
    2880:	e5963000 	ldr	r3, [r6]
    2884:	1a000008 	bne	28ac <__call_exitprocs+0x168>
    2888:	e3530000 	cmp	r3, #0
    288c:	0a000006 	beq	28ac <__call_exitprocs+0x168>
    2890:	e1a00006 	mov	r0, r6
    2894:	e58b3000 	str	r3, [r11]
    2898:	e320f000 	nop	{0}
    289c:	e59b6000 	ldr	r6, [r11]
    28a0:	e3560000 	cmp	r6, #0
    28a4:	1affffb5 	bne	2780 <__call_exitprocs+0x3c>
    28a8:	eaffffe8 	b	2850 <__call_exitprocs+0x10c>
    28ac:	e1a0b006 	mov	r11, r6
    28b0:	e1a06003 	mov	r6, r3
    28b4:	eafffff9 	b	28a0 <__call_exitprocs+0x15c>
    28b8:	00002a70 	.word	0x00002a70
    28bc:	00000000 	.word	0x00000000

000028c0 <register_fini>:
    28c0:	e92d4008 	push	{r3, lr}
    28c4:	e59f3010 	ldr	r3, [pc, #16]	; 28dc <register_fini+0x1c>
    28c8:	e3530000 	cmp	r3, #0
    28cc:	159f000c 	ldrne	r0, [pc, #12]	; 28e0 <register_fini+0x20>
    28d0:	1bfffe79 	blne	22bc <atexit>
    28d4:	e8bd4008 	pop	{r3, lr}
    28d8:	e12fff1e 	bx	lr
    28dc:	00002a98 	.word	0x00002a98
    28e0:	000028e4 	.word	0x000028e4

000028e4 <__libc_fini_array>:
    28e4:	e92d4038 	push	{r3, r4, r5, lr}
    28e8:	e59f5030 	ldr	r5, [pc, #48]	; 2920 <__libc_fini_array+0x3c>
    28ec:	e59f4030 	ldr	r4, [pc, #48]	; 2924 <__libc_fini_array+0x40>
    28f0:	e0654004 	rsb	r4, r5, r4
    28f4:	e1b04144 	asrs	r4, r4, #2
    28f8:	10855104 	addne	r5, r5, r4, lsl #2
    28fc:	0a000004 	beq	2914 <__libc_fini_array+0x30>
    2900:	e5353004 	ldr	r3, [r5, #-4]!
    2904:	e1a0e00f 	mov	lr, pc
    2908:	e12fff13 	bx	r3
    290c:	e2544001 	subs	r4, r4, #1
    2910:	1afffffa 	bne	2900 <__libc_fini_array+0x1c>
    2914:	eb00005f 	bl	2a98 <__libc_fini>
    2918:	e8bd4038 	pop	{r3, r4, r5, lr}
    291c:	e12fff1e 	bx	lr
    2920:	00002ab0 	.word	0x00002ab0
    2924:	00002ab4 	.word	0x00002ab4

00002928 <__cs3_premain>:
    2928:	e92d4008 	push	{r3, lr}
    292c:	eb000017 	bl	2990 <__libc_init_array>
    2930:	e59f3030 	ldr	r3, [pc, #48]	; 2968 <__cs3_premain+0x40>
    2934:	e3530000 	cmp	r3, #0
    2938:	15930000 	ldrne	r0, [r3]
    293c:	01a00003 	moveq	r0, r3
    2940:	e59f3024 	ldr	r3, [pc, #36]	; 296c <__cs3_premain+0x44>
    2944:	e3530000 	cmp	r3, #0
    2948:	15931000 	ldrne	r1, [r3]
    294c:	01a01003 	moveq	r1, r3
    2950:	e3a02000 	mov	r2, #0
    2954:	ebfff6a3 	bl	3e8 <main>
    2958:	e59f3010 	ldr	r3, [pc, #16]	; 2970 <__cs3_premain+0x48>
    295c:	e3530000 	cmp	r3, #0
    2960:	1bfffe5d 	blne	22dc <exit>
    2964:	eafffffe 	b	2964 <__cs3_premain+0x3c>
	...
    2970:	000022dc 	.word	0x000022dc

00002974 <_exit>:
    2974:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    2978:	e3a00018 	mov	r0, #24
    297c:	e59f1004 	ldr	r1, [pc, #4]	; 2988 <_exit+0x14>
    2980:	ef123456 	svc	0x00123456
    2984:	eafffffe 	b	2984 <_exit+0x10>
    2988:	00020026 	.word	0x00020026

0000298c <__cs3_isr_interrupt>:
    298c:	eafffffe 	b	298c <__cs3_isr_interrupt>

00002990 <__libc_init_array>:
    2990:	e92d4070 	push	{r4, r5, r6, lr}
    2994:	e59f506c 	ldr	r5, [pc, #108]	; 2a08 <__libc_init_array+0x78>
    2998:	e59f606c 	ldr	r6, [pc, #108]	; 2a0c <__libc_init_array+0x7c>
    299c:	e0656006 	rsb	r6, r5, r6
    29a0:	e1b06146 	asrs	r6, r6, #2
    29a4:	12455004 	subne	r5, r5, #4
    29a8:	13a04000 	movne	r4, #0
    29ac:	0a000005 	beq	29c8 <__libc_init_array+0x38>
    29b0:	e5b53004 	ldr	r3, [r5, #4]!
    29b4:	e2844001 	add	r4, r4, #1
    29b8:	e1a0e00f 	mov	lr, pc
    29bc:	e12fff13 	bx	r3
    29c0:	e1560004 	cmp	r6, r4
    29c4:	1afffff9 	bne	29b0 <__libc_init_array+0x20>
    29c8:	e59f5040 	ldr	r5, [pc, #64]	; 2a10 <__libc_init_array+0x80>
    29cc:	e59f6040 	ldr	r6, [pc, #64]	; 2a14 <__libc_init_array+0x84>
    29d0:	e0656006 	rsb	r6, r5, r6
    29d4:	eb000027 	bl	2a78 <_init>
    29d8:	e1b06146 	asrs	r6, r6, #2
    29dc:	12455004 	subne	r5, r5, #4
    29e0:	13a04000 	movne	r4, #0
    29e4:	0a000005 	beq	2a00 <__libc_init_array+0x70>
    29e8:	e5b53004 	ldr	r3, [r5, #4]!
    29ec:	e2844001 	add	r4, r4, #1
    29f0:	e1a0e00f 	mov	lr, pc
    29f4:	e12fff13 	bx	r3
    29f8:	e1560004 	cmp	r6, r4
    29fc:	1afffff9 	bne	29e8 <__libc_init_array+0x58>
    2a00:	e8bd4070 	pop	{r4, r5, r6, lr}
    2a04:	e12fff1e 	bx	lr
    2a08:	00002a90 	.word	0x00002a90
    2a0c:	00002a90 	.word	0x00002a90
    2a10:	00002a90 	.word	0x00002a90
    2a14:	00002a98 	.word	0x00002a98

Disassembly of section .rodata:

00002a20 <_global_impure_ptr-0x50>:
    2a20:	ff0000ff 	.word	0xff0000ff
    2a24:	000000f0 	.word	0x000000f0
    2a28:	189374bc 	.word	0x189374bc
    2a2c:	40605a04 	.word	0x40605a04
    2a30:	be76c8b4 	.word	0xbe76c8b4
    2a34:	40625a9f 	.word	0x40625a9f
    2a38:	49ba5e35 	.word	0x49ba5e35
    2a3c:	40649a0c 	.word	0x40649a0c
    2a40:	e353f7cf 	.word	0xe353f7cf
    2a44:	4065d3a5 	.word	0x4065d3a5
    2a48:	9db22d0e 	.word	0x9db22d0e
    2a4c:	40687fef 	.word	0x40687fef
    2a50:	00000000 	.word	0x00000000
    2a54:	406b8000 	.word	0x406b8000
    2a58:	dd2f1aa0 	.word	0xdd2f1aa0
    2a5c:	406ede24 	.word	0x406ede24
    2a60:	189374bc 	.word	0x189374bc
    2a64:	40705a04 	.word	0x40705a04
	...

00002a70 <_global_impure_ptr>:
    2a70:	000318e0 00000043                       ....C...

00002a78 <_init>:
    2a78:	e1a0c00d 	mov	r12, sp
    2a7c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2a80:	e24cb004 	sub	r11, r12, #4
    2a84:	e24bd028 	sub	sp, r11, #40	; 0x28
    2a88:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2a8c:	e12fff1e 	bx	lr

00002a90 <__init_array_start>:
    2a90:	000028c0 	.word	0x000028c0

00002a94 <__frame_dummy_init_array_entry>:
    2a94:	00000208                                ....

00002a98 <__libc_fini>:
    2a98:	e1a0c00d 	mov	r12, sp
    2a9c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2aa0:	e24cb004 	sub	r11, r12, #4
    2aa4:	e24bd028 	sub	sp, r11, #40	; 0x28
    2aa8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2aac:	e12fff1e 	bx	lr

00002ab0 <__fini_array_start>:
    2ab0:	000001c4 	.word	0x000001c4

00002ab4 <__cs3_regions>:
    2ab4:	00000000 	.word	0x00000000
    2ab8:	00000040 	.word	0x00000040
    2abc:	00000040 	.word	0x00000040
    2ac0:	00031cd0 	.word	0x00031cd0
    2ac4:	00000048 	.word	0x00000048
